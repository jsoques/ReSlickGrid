// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../@slickgrid-universal/common
//   ../../@slickgrid-universal/binding
//   ../../@slickgrid-universal/event-pub-sub
//   ../../@slickgrid-universal/composite-editor-component
//   ../../@slickgrid-universal/empty-warning-component
//   ../../@slickgrid-universal/pagination-component
//   ../../@slickgrid-universal/custom-footer-component
//   ../../@slickgrid-universal/text-export

declare module 'slicker-bundle' {
    import { Aggregators, Editors, Enums, Filters, Formatters, GroupTotalFormatters, SortComparers, Utilities } from '@slickgrid-universal/common';
    import { BindingService } from '@slickgrid-universal/binding';
    import { EventPubSubService } from '@slickgrid-universal/event-pub-sub';
    import { SlickCompositeEditorComponent } from '@slickgrid-universal/composite-editor-component';
    import { SlickEmptyWarningComponent } from '@slickgrid-universal/empty-warning-component';
    import { SlickPaginationComponent } from '@slickgrid-universal/pagination-component';
    import { SlickVanillaGridBundle } from 'slicker-bundle/components/slick-vanilla-grid-bundle';
    const Slicker: {
        GridBundle: typeof SlickVanillaGridBundle;
        Aggregators: {
            Avg: typeof import("@slickgrid-universal/common").AvgAggregator;
            Clone: typeof import("@slickgrid-universal/common").CloneAggregator;
            Count: typeof import("@slickgrid-universal/common").CountAggregator;
            Distinct: typeof import("@slickgrid-universal/common").DistinctAggregator;
            Min: typeof import("@slickgrid-universal/common").MinAggregator;
            Max: typeof import("@slickgrid-universal/common").MaxAggregator;
            Sum: typeof import("@slickgrid-universal/common").SumAggregator;
        };
        BindingService: typeof BindingService;
        Editors: {
            autoComplete: typeof import("@slickgrid-universal/common").AutoCompleteEditor;
            checkbox: typeof import("@slickgrid-universal/common").CheckboxEditor;
            date: typeof import("@slickgrid-universal/common").DateEditor;
            dualInput: typeof import("@slickgrid-universal/common").DualInputEditor;
            float: typeof import("@slickgrid-universal/common").FloatEditor;
            integer: typeof import("@slickgrid-universal/common").IntegerEditor;
            longText: typeof import("@slickgrid-universal/common").LongTextEditor;
            multipleSelect: typeof import("@slickgrid-universal/common").MultipleSelectEditor;
            password: typeof import("@slickgrid-universal/common/dist/commonjs/editors/inputPasswordEditor").InputPasswordEditor;
            singleSelect: typeof import("@slickgrid-universal/common").SingleSelectEditor;
            slider: typeof import("@slickgrid-universal/common").SliderEditor;
            text: typeof import("@slickgrid-universal/common").InputEditor;
        };
        Enums: typeof Enums;
        Filters: {
            autoComplete: typeof import("@slickgrid-universal/common").AutoCompleteFilter;
            compoundDate: typeof import("@slickgrid-universal/common").CompoundDateFilter;
            compoundInput: typeof import("@slickgrid-universal/common").CompoundInputFilter;
            compoundInputNumber: typeof import("@slickgrid-universal/common").CompoundInputNumberFilter;
            compoundInputPassword: typeof import("@slickgrid-universal/common").CompoundInputPasswordFilter;
            compoundInputText: typeof import("@slickgrid-universal/common").CompoundInputFilter;
            compoundSlider: typeof import("@slickgrid-universal/common").CompoundSliderFilter;
            dateRange: typeof import("@slickgrid-universal/common").DateRangeFilter;
            input: typeof import("@slickgrid-universal/common").InputFilter;
            inputMask: typeof import("@slickgrid-universal/common").InputMaskFilter;
            inputNumber: typeof import("@slickgrid-universal/common").InputNumberFilter;
            inputPassword: typeof import("@slickgrid-universal/common").InputPasswordFilter;
            inputText: typeof import("@slickgrid-universal/common").InputFilter;
            multipleSelect: typeof import("@slickgrid-universal/common").MultipleSelectFilter;
            select: typeof import("@slickgrid-universal/common").NativeSelectFilter;
            singleSelect: typeof import("@slickgrid-universal/common").SingleSelectFilter;
            slider: typeof import("@slickgrid-universal/common").SliderFilter;
            sliderRange: typeof import("@slickgrid-universal/common").SliderRangeFilter;
        };
        Formatters: {
            alignCenter: import("@slickgrid-universal/common").Formatter<any>;
            alignRight: import("@slickgrid-universal/common").Formatter<any>;
            arrayObjectToCsv: import("@slickgrid-universal/common").Formatter<any>;
            arrayToCsv: import("@slickgrid-universal/common").Formatter<any>;
            bold: import("@slickgrid-universal/common").Formatter<any>;
            bsDropdown: import("@slickgrid-universal/common").Formatter<any>;
            center: import("@slickgrid-universal/common").Formatter<any>;
            checkbox: import("@slickgrid-universal/common").Formatter<any>;
            checkmark: import("@slickgrid-universal/common").Formatter<any>;
            checkmarkMaterial: import("@slickgrid-universal/common").Formatter<any>;
            complex: import("@slickgrid-universal/common").Formatter<any>;
            complexObject: import("@slickgrid-universal/common").Formatter<any>;
            collection: import("@slickgrid-universal/common").Formatter<any>;
            collectionEditor: import("@slickgrid-universal/common").Formatter<any>;
            dateIso: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeIso: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeShortIso: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeIsoAmPm: import("@slickgrid-universal/common").Formatter<any>;
            dateEuro: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeEuro: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeShortEuro: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeEuroAmPm: import("@slickgrid-universal/common").Formatter<any>;
            dateUs: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeUs: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeShortUs: import("@slickgrid-universal/common").Formatter<any>;
            dateTimeUsAmPm: import("@slickgrid-universal/common").Formatter<any>;
            deleteIcon: import("@slickgrid-universal/common").Formatter<any>;
            decimal: import("@slickgrid-universal/common").Formatter<any>;
            dollar: import("@slickgrid-universal/common").Formatter<any>;
            dollarColored: import("@slickgrid-universal/common").Formatter<any>;
            dollarColoredBold: import("@slickgrid-universal/common").Formatter<any>;
            editIcon: import("@slickgrid-universal/common").Formatter<any>;
            fakeHyperlink: import("@slickgrid-universal/common").Formatter<any>;
            hyperlink: import("@slickgrid-universal/common").Formatter<any>;
            icon: import("@slickgrid-universal/common").Formatter<any>;
            infoIcon: import("@slickgrid-universal/common").Formatter<any>;
            italic: import("@slickgrid-universal/common").Formatter<any>;
            lowercase: import("@slickgrid-universal/common").Formatter<any>;
            mask: import("@slickgrid-universal/common").Formatter<any>;
            multiple: import("@slickgrid-universal/common").Formatter<any>;
            percent: import("@slickgrid-universal/common").Formatter<any>;
            percentComplete: import("@slickgrid-universal/common").Formatter<any>;
            percentCompleteBar: import("@slickgrid-universal/common").Formatter<any>;
            percentCompleteBarWithText: import("@slickgrid-universal/common").Formatter<any>;
            percentSymbol: import("@slickgrid-universal/common").Formatter<any>;
            progressBar: import("@slickgrid-universal/common").Formatter<any>;
            translate: import("@slickgrid-universal/common").Formatter<any>;
            translateBoolean: import("@slickgrid-universal/common").Formatter<any>;
            tree: import("@slickgrid-universal/common").Formatter<any>;
            treeExport: import("@slickgrid-universal/common").Formatter<any>;
            uppercase: import("@slickgrid-universal/common").Formatter<any>;
            yesNo: import("@slickgrid-universal/common").Formatter<any>;
        };
        GroupTotalFormatters: {
            avgTotals: import("@slickgrid-universal/common").GroupTotalsFormatter;
            avgTotalsDollar: import("@slickgrid-universal/common").GroupTotalsFormatter;
            avgTotalsPercentage: import("@slickgrid-universal/common").GroupTotalsFormatter;
            maxTotals: import("@slickgrid-universal/common").GroupTotalsFormatter;
            minTotals: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotals: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsBold: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsColored: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsDollar: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsDollarBold: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsDollarColored: import("@slickgrid-universal/common").GroupTotalsFormatter;
            sumTotalsDollarColoredBold: import("@slickgrid-universal/common").GroupTotalsFormatter;
        };
        SortComparers: {
            date: import("@slickgrid-universal/common").SortComparer;
            dateIso: import("@slickgrid-universal/common").SortComparer;
            dateUtc: import("@slickgrid-universal/common").SortComparer;
            dateTime: import("@slickgrid-universal/common").SortComparer;
            dateTimeIso: import("@slickgrid-universal/common").SortComparer;
            dateTimeIsoAmPm: import("@slickgrid-universal/common").SortComparer;
            dateTimeIsoAM_PM: import("@slickgrid-universal/common").SortComparer;
            dateTimeShortIso: import("@slickgrid-universal/common").SortComparer;
            dateEuro: import("@slickgrid-universal/common").SortComparer;
            dateEuroShort: import("@slickgrid-universal/common").SortComparer;
            dateTimeShortEuro: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuro: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuroAmPm: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuroAM_PM: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuroShort: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuroShortAmPm: import("@slickgrid-universal/common").SortComparer;
            dateTimeEuroShortAM_PM: import("@slickgrid-universal/common").SortComparer;
            dateUs: import("@slickgrid-universal/common").SortComparer;
            dateUsShort: import("@slickgrid-universal/common").SortComparer;
            dateTimeShortUs: import("@slickgrid-universal/common").SortComparer;
            dateTimeUs: import("@slickgrid-universal/common").SortComparer;
            dateTimeUsAmPm: import("@slickgrid-universal/common").SortComparer;
            dateTimeUsAM_PM: import("@slickgrid-universal/common").SortComparer;
            dateTimeUsShort: import("@slickgrid-universal/common").SortComparer;
            dateTimeUsShortAmPm: import("@slickgrid-universal/common").SortComparer;
            dateTimeUsShortAM_PM: import("@slickgrid-universal/common").SortComparer;
            numeric: import("@slickgrid-universal/common").SortComparer;
            objectString: import("@slickgrid-universal/common").SortComparer;
            string: import("@slickgrid-universal/common").SortComparer;
        };
        Utilities: {
            deepAssign: any;
            sortByFieldType(fieldType: "string" | "number" | "boolean" | "object" | "text" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "readonly", value1: any, value2: any, sortDirection: number, sortColumn?: import("@slickgrid-universal/common").Column<any> | undefined, gridOptions?: import("@slickgrid-universal/common").GridOption | undefined): number;
            addToArrayWhenNotExists<T = any>(inputArray: T[], inputItem: T, itemIdPropName?: string | undefined): void;
            addWhiteSpaces(nbSpaces: number, spaceChar?: string | undefined): string;
            arrayRemoveItemByIndex<T_1>(array: T_1[], index: number): T_1[];
            castObservableToPromise<T_2>(rxjs: import("@slickgrid-universal/common").RxJsFacade, input: Promise<T_2> | import("@slickgrid-universal/common").Observable<T_2> | import("@slickgrid-universal/common").Subject<T_2>, fromServiceName?: string | undefined): Promise<T_2>;
            unflattenParentChildArrayToTree<P, T_3 extends P & {
                [childrenPropName: string]: P[];
            }>(flatArray: P[], options?: {
                childrenPropName?: string | undefined;
                collapsedPropName?: string | undefined;
                identifierPropName?: string | undefined;
                levelPropName?: string | undefined;
                parentPropName?: string | undefined;
                initiallyCollapsed?: boolean | undefined;
            } | undefined): T_3[];
            addTreeLevelByMutation<T_4>(treeArray: T_4[], options: {
                childrenPropName: string;
                levelPropName: string;
            }, treeLevel?: number | undefined): void;
            flattenToParentChildArray<T_5>(treeArray: T_5[], options?: {
                parentPropName?: string | undefined;
                childrenPropName?: string | undefined;
                hasChildrenPropName?: string | undefined;
                identifierPropName?: string | undefined;
                shouldAddTreeLevelNumber?: boolean | undefined;
                levelPropName?: string | undefined;
            } | undefined): Omit<T_5, number | typeof Symbol.iterator | "link" | "small" | "sub" | "sup" | "toString" | "valueOf" | "toLocaleString" | "charAt" | "charCodeAt" | "concat" | "indexOf" | "lastIndexOf" | "localeCompare" | "match" | "replace" | "search" | "slice" | "split" | "substring" | "toLowerCase" | "toLocaleLowerCase" | "toUpperCase" | "toLocaleUpperCase" | "trim" | "length" | "substr" | "codePointAt" | "includes" | "endsWith" | "normalize" | "repeat" | "startsWith" | "anchor" | "big" | "blink" | "bold" | "fixed" | "fontcolor" | "fontsize" | "italics" | "strike" | "padStart" | "padEnd" | "trimLeft" | "trimRight" | "trimStart" | "trimEnd">[];
            deepCopy(objectOrArray: any): any;
            emptyElement<T_6 extends Element = Element>(element?: T_6 | null | undefined): T_6 | null | undefined;
            emptyObject(obj: any): any;
            findItemInHierarchicalStructure<T_7 = any>(treeArray: T_7[], predicate: (item: T_7) => boolean, childrenPropertyName: string): T_7 | undefined;
            findItemInTreeStructure<T_8 = any>(treeArray: T_8[], predicate: (item: T_8) => boolean, childrenPropertyName: string): T_8 | undefined;
            htmlEncode(inputValue: string): string;
            htmlEntityDecode(input: string): string;
            htmlEncodedStringWithPadding(inputStr: string, paddingLength: number): string;
            isNumber(value: any, strict?: boolean | undefined): boolean;
            decimalFormatted(input: string | number, minDecimal?: number | undefined, maxDecimal?: number | undefined, decimalSeparator?: "," | "." | undefined, thousandSeparator?: "" | "," | "_" | "." | " " | undefined): string;
            destroyObjectDomElementProps(obj: any): void;
            formatNumber(input: string | number, minDecimal?: number | undefined, maxDecimal?: number | undefined, displayNegativeNumberWithParentheses?: boolean | undefined, symbolPrefix?: string | undefined, symbolSuffix?: string | undefined, decimalSeparator?: "," | "." | undefined, thousandSeparator?: "" | "," | "_" | "." | " " | undefined): string;
            getDescendantProperty<T_9 = any>(object: T_9, path: string | undefined): any;
            getTranslationPrefix(gridOptions?: import("@slickgrid-universal/common").GridOption | undefined): string;
            mapMomentDateFormatWithFieldType(fieldType: "string" | "number" | "boolean" | "object" | "text" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "readonly"): string;
            mapFlatpickrDateFormatWithFieldType(fieldType: "string" | "number" | "boolean" | "object" | "text" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "readonly"): string;
            mapOperatorType(operator: Enums.OperatorString | Enums.OperatorType): Enums.OperatorType;
            mapOperatorToShorthandDesignation(operator: Enums.OperatorString | Enums.OperatorType): Enums.OperatorString;
            mapOperatorByFieldType(fieldType: "string" | "number" | "boolean" | "object" | "text" | "unknown" | "integer" | "float" | "date" | "dateIso" | "dateUtc" | "dateTime" | "dateTimeIso" | "dateTimeIsoAmPm" | "dateTimeIsoAM_PM" | "dateTimeShortIso" | "dateEuro" | "dateEuroShort" | "dateTimeShortEuro" | "dateTimeEuro" | "dateTimeEuroAmPm" | "dateTimeEuroAM_PM" | "dateTimeEuroShort" | "dateTimeEuroShortAmPm" | "dateTimeEuroShortAM_PM" | "dateUs" | "dateUsShort" | "dateTimeShortUs" | "dateTimeUs" | "dateTimeUsAmPm" | "dateTimeUsAM_PM" | "dateTimeUsShort" | "dateTimeUsShortAmPm" | "dateTimeUsShortAM_PM" | "password" | "readonly"): Enums.OperatorType;
            objectWithoutKey<T_10 = any>(obj: T_10, omitKey: keyof T_10): T_10;
            parseBoolean(input: any): boolean;
            parseUtcDate(inputDateString: any, useUtc?: boolean | undefined): string;
            sanitizeHtmlToText(htmlString: string): string;
            sanitizeTextByAvailableSanitizer(gridOptions: import("@slickgrid-universal/common").GridOption, dirtyHtml: string, domPurifyOptions?: import("dompurify").Config | undefined): string;
            setDeepValue<T_11 = any>(obj: T_11, path: string | string[], value: any): void;
            thousandSeparatorFormatted(inputValue: string | number | null, separator?: "" | "," | "_" | "." | " " | undefined): string | null;
            titleCase(inputStr: string, caseEveryWords?: boolean | undefined): string;
            toCamelCase(inputStr: string): string;
            toKebabCase(inputStr: string): string;
            toSentenceCase(inputStr: string): string;
            findOrDefault<T_12 = any>(array: T_12[], logic: (item: T_12) => boolean, defaultVal?: {} | undefined): any;
            getHtmlElementOffset(element: HTMLElement): {
                top: number;
                left: number;
            };
            toSnakeCase(inputStr: string): string;
            unsubscribeAll(subscriptions: (import("@slickgrid-universal/common").Subscription | import("@slickgrid-universal/common").EventSubscription)[]): (import("@slickgrid-universal/common").Subscription | import("@slickgrid-universal/common").EventSubscription)[];
            uniqueArray<T_13 = any>(arr: T_13[]): T_13[];
            uniqueObjectArray(arr: any[], propertyName?: string | undefined): any[];
            collectionObserver(inputArray: any[], callback: (outputArray: any[], newValues: any[]) => void): void;
            propertyObserver(obj: any, prop: string, callback: (newValue: any) => void): void;
            BackendUtilityService: typeof import("@slickgrid-universal/common").BackendUtilityService;
        };
    };
    export { BindingService };
    export { Aggregators, Editors, Enums, EventPubSubService, Filters, Formatters, GroupTotalFormatters, SortComparers, Utilities };
    export { SlickCompositeEditorComponent, SlickEmptyWarningComponent, SlickPaginationComponent, SlickVanillaGridBundle };
    export { Slicker };
    export * from 'slicker-bundle/interfaces/index';
    export * from 'slicker-bundle/services/index';
}

declare module 'slicker-bundle/components/slick-vanilla-grid-bundle' {
    import 'flatpickr/dist/l10n/fr';
    import 'slickgrid/lib/jquery.event.drag-2.3.0';
    import 'slickgrid/lib/jquery.mousewheel';
    import 'slickgrid/slick.core';
    import 'slickgrid/slick.grid';
    import 'slickgrid/slick.dataview';
    import 'slickgrid/slick.groupitemmetadataprovider';
    import { BackendServiceApi, Column, ExtensionList, GridOption, Metrics, Pagination, ServicePagination, SlickDataView, SlickEventHandler, SlickGrid, SlickGroupItemMetadataProvider, Subscription, ExtensionUtility, BackendUtilityService, CollectionService, ExtensionService, FilterFactory, FilterService, GridEventService, GridService, GridStateService, GroupingAndColspanService, PaginationService, ResizerService, RxJsFacade, SharedService, SortService, TranslaterService, TreeDataService } from '@slickgrid-universal/common';
    import { EventPubSubService } from '@slickgrid-universal/event-pub-sub';
    import { SlickCompositeEditorComponent } from '@slickgrid-universal/composite-editor-component';
    import { SlickEmptyWarningComponent } from '@slickgrid-universal/empty-warning-component';
    import { SlickFooterComponent } from '@slickgrid-universal/custom-footer-component';
    import { SlickPaginationComponent } from '@slickgrid-universal/pagination-component';
    import { SlickerGridInstance } from 'slicker-bundle/interfaces/slickerGridInstance.interface';
    import { UniversalContainerService } from 'slicker-bundle/services/universalContainer.service';
    export class SlickVanillaGridBundle {
            backendServiceApi: BackendServiceApi | undefined;
            dataView: SlickDataView;
            slickGrid: SlickGrid;
            metrics?: Metrics;
            customDataView: boolean;
            paginationData?: {
                    gridOptions: GridOption;
                    paginationService: PaginationService;
            };
            totalItems: number;
            groupItemMetadataProvider?: SlickGroupItemMetadataProvider;
            resizerService: ResizerService;
            subscriptions: Subscription[];
            showPagination: boolean;
            extensionUtility: ExtensionUtility;
            backendUtilityService: BackendUtilityService;
            collectionService: CollectionService;
            extensionService: ExtensionService;
            filterFactory: FilterFactory;
            filterService: FilterService;
            gridEventService: GridEventService;
            gridService: GridService;
            gridStateService: GridStateService;
            groupingService: GroupingAndColspanService;
            paginationService: PaginationService;
            rxjs?: RxJsFacade;
            sharedService: SharedService;
            sortService: SortService;
            translaterService: TranslaterService | undefined;
            treeDataService: TreeDataService;
            universalContainerService: UniversalContainerService;
            slickCompositeEditor: SlickCompositeEditorComponent | undefined;
            slickEmptyWarning: SlickEmptyWarningComponent | undefined;
            slickFooter: SlickFooterComponent | undefined;
            slickPagination: SlickPaginationComponent | undefined;
            gridClass: string;
            gridClassName: string;
            get eventHandler(): SlickEventHandler;
            get columnDefinitions(): Column<any>[];
            set columnDefinitions(columnDefinitions: Column<any>[]);
            get dataset(): any[];
            set dataset(newDataset: any[]);
            get datasetHierarchical(): any[] | undefined;
            set datasetHierarchical(newHierarchicalDataset: any[] | undefined);
            get gridOptions(): GridOption;
            set gridOptions(options: GridOption);
            get paginationOptions(): Pagination | undefined;
            set paginationOptions(newPaginationOptions: Pagination | undefined);
            get isDatasetInitialized(): boolean;
            set isDatasetInitialized(isInitialized: boolean);
            get isGridInitialized(): boolean;
            get instances(): SlickerGridInstance | undefined;
            get extensions(): ExtensionList<any, any> | undefined;
            get registeredResources(): any[];
            /**
                * Slicker Grid Bundle constructor
                * @param {Object} gridParentContainerElm - div HTML DOM element container
                * @param {Array<Column>} columnDefs - Column Definitions
                * @param {Object} options - Grid Options
                * @param {Array<Object>} dataset - Dataset
                * @param {Array<Object>} hierarchicalDataset - Hierarchical Dataset
                * @param {Object} services - Typically only used for Unit Testing when we want to pass Mocked/Stub Services
                */
            constructor(gridParentContainerElm: HTMLElement, columnDefs?: Column[], options?: GridOption, dataset?: any[], hierarchicalDataset?: any[], services?: {
                    backendUtilityService?: BackendUtilityService;
                    collectionService?: CollectionService;
                    eventPubSubService?: EventPubSubService;
                    extensionService?: ExtensionService;
                    extensionUtility?: ExtensionUtility;
                    filterService?: FilterService;
                    gridEventService?: GridEventService;
                    gridService?: GridService;
                    gridStateService?: GridStateService;
                    groupingAndColspanService?: GroupingAndColspanService;
                    paginationService?: PaginationService;
                    resizerService?: ResizerService;
                    rxjs?: RxJsFacade;
                    sharedService?: SharedService;
                    sortService?: SortService;
                    treeDataService?: TreeDataService;
                    translaterService?: TranslaterService;
                    universalContainerService?: UniversalContainerService;
            });
            emptyGridContainerElm(): void;
            /** Dispose of the Component */
            dispose(shouldEmptyDomElementContainer?: boolean): void;
            initialization(gridContainerElm: HTMLElement, eventHandler: SlickEventHandler): void;
            mergeGridOptions(gridOptions: GridOption): GridOption;
            /**
                * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call
                * For now, this is GraphQL Service ONLY feature and it will basically
                * refresh the Dataset & Pagination without having the user to create his own PostProcess every time
                */
            createBackendApiInternalPostProcessCallback(gridOptions: GridOption): void;
            bindDifferentHooks(grid: SlickGrid, gridOptions: GridOption, dataView: SlickDataView): void;
            bindBackendCallbackFunctions(gridOptions: GridOption): void;
            bindResizeHook(grid: SlickGrid, options: GridOption): void;
            executeAfterDataviewCreated(gridOptions: GridOption): void;
            /**
                * On a Pagination changed, we will trigger a Grid State changed with the new pagination info
                * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection
                */
            paginationChanged(pagination: ServicePagination): void;
            /**
                * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well
                * @param dataset
                */
            refreshGridData(dataset: any[], totalCount?: number): void;
            /**
                * Dynamically change or update the column definitions list.
                * We will re-render the grid so that the new header and data shows up correctly.
                * If using translater, we also need to trigger a re-translate of the column headers
                */
            updateColumnDefinitionsList(newColumnDefinitions: Column[]): void;
            /**
                * Show the filter row displayed on first row, we can optionally pass false to hide it.
                * @param showing
                */
            showHeaderRow(showing?: boolean): boolean;
            /**
                * Check if there's any Pagination Presets defined in the Grid Options,
                * if there are then load them in the paginationOptions object
                */
            setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination;
    }
}

declare module 'slicker-bundle/interfaces/index' {
    export * from 'slicker-bundle/interfaces/slickerGridInstance.interface';
}

declare module 'slicker-bundle/services/index' {
    export * from 'slicker-bundle/services/textExport.service';
    export * from 'slicker-bundle/services/universalContainer.service';
}

declare module 'slicker-bundle/interfaces/slickerGridInstance.interface' {
    import { BackendService, ExtensionService, ExtensionUtility, FilterService, GridEventService, GridService, GridStateService, GroupingAndColspanService, PaginationService, ResizerService, SlickDataView, SlickGrid, SortService, TreeDataService } from '@slickgrid-universal/common';
    export interface SlickerGridInstance {
        /** Slick DataView object */
        dataView: SlickDataView;
        /** Slick Grid object */
        slickGrid: SlickGrid;
        /** Dispose of the grid and optionally empty the DOM element grid container as well */
        dispose: (emptyDomElementContainer?: boolean) => void;
        /** Backend Service, when available */
        backendService?: BackendService;
        /** Extension (Controls & Plugins) Service */
        extensionService: ExtensionService;
        /** Extension Utilities */
        extensionUtility: ExtensionUtility;
        /** Filter Service */
        filterService: FilterService;
        /** Grid Service (grid extra functionalities) */
        gridService: GridService;
        /** Grid Events Service */
        gridEventService: GridEventService;
        /** Grid State Service */
        gridStateService: GridStateService;
        /** Grouping (and colspan) Service */
        groupingService: GroupingAndColspanService;
        /** Pagination Service (allows you to programmatically go to first/last page, etc...) */
        paginationService: PaginationService;
        /** Resizer Service (including auto-resize) */
        resizerService: ResizerService;
        /** Sort Service */
        sortService: SortService;
        /** Tree Data View Service */
        treeDataService: TreeDataService;
    }
}

declare module 'slicker-bundle/services/universalContainer.service' {
    import { ContainerInstance, ContainerService } from '@slickgrid-universal/common';
    export class UniversalContainerService implements ContainerService {
        dependencies: ContainerInstance[];
        get<T = any>(key: string): T | null;
        registerInstance(key: string, instance: any): void;
    }
}

declare module 'slicker-bundle/services/textExport.service' {
    import { ContainerService, SlickGrid, TextExportOption } from '@slickgrid-universal/common';
    import { TextExportService as UniversalExportService } from '@slickgrid-universal/text-export';
    export class TextExportService extends UniversalExportService {
        constructor();
        init(grid: SlickGrid, containerService: ContainerService): void;
        exportToFile(options: TextExportOption): Promise<boolean>;
    }
}

