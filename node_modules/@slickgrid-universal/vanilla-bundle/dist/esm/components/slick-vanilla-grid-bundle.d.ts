import 'flatpickr/dist/l10n/fr';
import 'slickgrid/lib/jquery.event.drag-2.3.0';
import 'slickgrid/lib/jquery.mousewheel';
import 'slickgrid/slick.core';
import 'slickgrid/slick.grid';
import 'slickgrid/slick.dataview';
import 'slickgrid/slick.groupitemmetadataprovider';
import { BackendServiceApi, Column, ExtensionList, GridOption, Metrics, Pagination, ServicePagination, SlickDataView, SlickEventHandler, SlickGrid, SlickGroupItemMetadataProvider, Subscription, ExtensionUtility, BackendUtilityService, CollectionService, ExtensionService, FilterFactory, FilterService, GridEventService, GridService, GridStateService, GroupingAndColspanService, PaginationService, ResizerService, RxJsFacade, SharedService, SortService, TranslaterService, TreeDataService } from '@slickgrid-universal/common';
import { EventPubSubService } from '@slickgrid-universal/event-pub-sub';
import { SlickCompositeEditorComponent } from '@slickgrid-universal/composite-editor-component';
import { SlickEmptyWarningComponent } from '@slickgrid-universal/empty-warning-component';
import { SlickFooterComponent } from '@slickgrid-universal/custom-footer-component';
import { SlickPaginationComponent } from '@slickgrid-universal/pagination-component';
import { SlickerGridInstance } from '../interfaces/slickerGridInstance.interface';
import { UniversalContainerService } from '../services/universalContainer.service';
export declare class SlickVanillaGridBundle {
    private _currentDatasetLength;
    private _eventPubSubService;
    private _columnDefinitions;
    private _gridOptions;
    private _gridContainerElm;
    private _gridParentContainerElm;
    private _hideHeaderRowAfterPageLoad;
    private _isDatasetInitialized;
    private _isDatasetHierarchicalInitialized;
    private _isGridInitialized;
    private _isLocalGrid;
    private _isPaginationInitialized;
    private _eventHandler;
    private _extensions;
    private _paginationOptions;
    private _registeredResources;
    private _slickgridInitialized;
    private _slickerGridInstances;
    backendServiceApi: BackendServiceApi | undefined;
    dataView: SlickDataView;
    slickGrid: SlickGrid;
    metrics?: Metrics;
    customDataView: boolean;
    paginationData?: {
        gridOptions: GridOption;
        paginationService: PaginationService;
    };
    totalItems: number;
    groupItemMetadataProvider?: SlickGroupItemMetadataProvider;
    resizerService: ResizerService;
    subscriptions: Subscription[];
    showPagination: boolean;
    extensionUtility: ExtensionUtility;
    backendUtilityService: BackendUtilityService;
    collectionService: CollectionService;
    extensionService: ExtensionService;
    filterFactory: FilterFactory;
    filterService: FilterService;
    gridEventService: GridEventService;
    gridService: GridService;
    gridStateService: GridStateService;
    groupingService: GroupingAndColspanService;
    paginationService: PaginationService;
    rxjs?: RxJsFacade;
    sharedService: SharedService;
    sortService: SortService;
    translaterService: TranslaterService | undefined;
    treeDataService: TreeDataService;
    universalContainerService: UniversalContainerService;
    slickCompositeEditor: SlickCompositeEditorComponent | undefined;
    slickEmptyWarning: SlickEmptyWarningComponent | undefined;
    slickFooter: SlickFooterComponent | undefined;
    slickPagination: SlickPaginationComponent | undefined;
    gridClass: string;
    gridClassName: string;
    get eventHandler(): SlickEventHandler;
    get columnDefinitions(): Column<any>[];
    set columnDefinitions(columnDefinitions: Column<any>[]);
    get dataset(): any[];
    set dataset(newDataset: any[]);
    get datasetHierarchical(): any[] | undefined;
    set datasetHierarchical(newHierarchicalDataset: any[] | undefined);
    get gridOptions(): GridOption;
    set gridOptions(options: GridOption);
    get paginationOptions(): Pagination | undefined;
    set paginationOptions(newPaginationOptions: Pagination | undefined);
    get isDatasetInitialized(): boolean;
    set isDatasetInitialized(isInitialized: boolean);
    get isGridInitialized(): boolean;
    get instances(): SlickerGridInstance | undefined;
    get extensions(): ExtensionList<any, any> | undefined;
    get registeredResources(): any[];
    /**
     * Slicker Grid Bundle constructor
     * @param {Object} gridParentContainerElm - div HTML DOM element container
     * @param {Array<Column>} columnDefs - Column Definitions
     * @param {Object} options - Grid Options
     * @param {Array<Object>} dataset - Dataset
     * @param {Array<Object>} hierarchicalDataset - Hierarchical Dataset
     * @param {Object} services - Typically only used for Unit Testing when we want to pass Mocked/Stub Services
     */
    constructor(gridParentContainerElm: HTMLElement, columnDefs?: Column[], options?: GridOption, dataset?: any[], hierarchicalDataset?: any[], services?: {
        backendUtilityService?: BackendUtilityService;
        collectionService?: CollectionService;
        eventPubSubService?: EventPubSubService;
        extensionService?: ExtensionService;
        extensionUtility?: ExtensionUtility;
        filterService?: FilterService;
        gridEventService?: GridEventService;
        gridService?: GridService;
        gridStateService?: GridStateService;
        groupingAndColspanService?: GroupingAndColspanService;
        paginationService?: PaginationService;
        resizerService?: ResizerService;
        rxjs?: RxJsFacade;
        sharedService?: SharedService;
        sortService?: SortService;
        treeDataService?: TreeDataService;
        translaterService?: TranslaterService;
        universalContainerService?: UniversalContainerService;
    });
    emptyGridContainerElm(): void;
    /** Dispose of the Component */
    dispose(shouldEmptyDomElementContainer?: boolean): void;
    initialization(gridContainerElm: HTMLElement, eventHandler: SlickEventHandler): void;
    mergeGridOptions(gridOptions: GridOption): GridOption;
    /**
     * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call
     * For now, this is GraphQL Service ONLY feature and it will basically
     * refresh the Dataset & Pagination without having the user to create his own PostProcess every time
     */
    createBackendApiInternalPostProcessCallback(gridOptions: GridOption): void;
    bindDifferentHooks(grid: SlickGrid, gridOptions: GridOption, dataView: SlickDataView): void;
    bindBackendCallbackFunctions(gridOptions: GridOption): void;
    bindResizeHook(grid: SlickGrid, options: GridOption): void;
    executeAfterDataviewCreated(gridOptions: GridOption): void;
    /**
     * On a Pagination changed, we will trigger a Grid State changed with the new pagination info
     * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection
     */
    paginationChanged(pagination: ServicePagination): void;
    /**
     * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well
     * @param dataset
     */
    refreshGridData(dataset: any[], totalCount?: number): void;
    /**
     * Dynamically change or update the column definitions list.
     * We will re-render the grid so that the new header and data shows up correctly.
     * If using translater, we also need to trigger a re-translate of the column headers
     */
    updateColumnDefinitionsList(newColumnDefinitions: Column[]): void;
    /**
     * Show the filter row displayed on first row, we can optionally pass false to hide it.
     * @param showing
     */
    showHeaderRow(showing?: boolean): boolean;
    /**
     * Check if there's any Pagination Presets defined in the Grid Options,
     * if there are then load them in the paginationOptions object
     */
    setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination;
    /**
     * Loop through all column definitions and copy the original optional `width` properties optionally provided by the user.
     * We will use this when doing a resize by cell content, if user provided a `width` it won't override it.
     */
    private copyColumnWidthsReference;
    private displayEmptyDataWarning;
    /** When data changes in the DataView, we'll refresh the metrics and/or display a warning if the dataset is empty */
    private handleOnItemCountChanged;
    /** Initialize the Pagination Service once */
    private initializePaginationService;
    /**
     * Render (or dispose) the Pagination Component, user can optionally provide False (to not show it) which will in term dispose of the Pagination,
     * also while disposing we can choose to omit the disposable of the Pagination Service (if we are simply toggling the Pagination, we want to keep the Service alive)
     * @param {Boolean} showPagination - show (new render) or not (dispose) the Pagination
     * @param {Boolean} shouldDisposePaginationService - when disposing the Pagination, do we also want to dispose of the Pagination Service? (defaults to True)
     */
    private renderPagination;
    /** Load the Editor Collection asynchronously and replace the "collection" property when Promise resolves */
    private loadEditorCollectionAsync;
    /** Load any possible Columns Grid Presets */
    private loadColumnPresetsWhenDatasetInitialized;
    /** Load any possible Filters Grid Presets */
    private loadFilterPresetsWhenDatasetInitialized;
    /**
     * local grid, check if we need to show the Pagination
     * if so then also check if there's any presets and finally initialize the PaginationService
     * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total
     */
    private loadLocalGridPagination;
    /** Load any Row Selections into the DataView that were presets by the user */
    private loadRowSelectionPresetWhenExists;
    /** Pre-Register any Resource that don't require SlickGrid to be instantiated (for example RxJS Resource) */
    private preRegisterResources;
    private registerResources;
    /** Register the RxJS Resource in all necessary services which uses */
    private registerRxJsResource;
    /**
     * Takes a flat dataset with parent/child relationship, sort it (via its tree structure) and return the sorted flat array
     * @returns {Array<Object>} sort flat parent/child dataset
     */
    private sortTreeDataset;
    /**
     * For convenience to the user, we provide the property "editor" as an Slickgrid-Universal editor complex object
     * however "editor" is used internally by SlickGrid for it's own Editor Factory
     * so in our lib we will swap "editor" and copy it into a new property called "internalColumnEditor"
     * then take back "editor.model" and make it the new "editor" so that SlickGrid Editor Factory still works
     */
    private swapInternalEditorToSlickGridFactoryEditor;
    /** Translate all Custom Footer Texts (footer with metrics) */
    private translateCustomFooterTexts;
    /** translate all columns (including hidden columns) */
    private translateColumnHeaderTitleKeys;
    /** translate all column groups (including hidden columns) */
    private translateColumnGroupKeys;
    /**
     * Update the "internalColumnEditor.collection" property.
     * Since this is called after the async call resolves, the pointer will not be the same as the "column" argument passed.
     * Once we found the new pointer, we will reassign the "editor" and "collection" to the "internalColumnEditor" so it has newest collection
     */
    private updateEditorCollection;
}
//# sourceMappingURL=slick-vanilla-grid-bundle.d.ts.map