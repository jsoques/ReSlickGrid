import { EventNamingStyle, EventSubscription, PubSubService } from '@slickgrid-universal/common';
interface PubSubEvent {
    name: string;
    listener: (event: CustomEventInit) => void;
}
export declare class EventPubSubService implements PubSubService {
    protected _elementSource: Element;
    protected _subscribedEvents: PubSubEvent[];
    eventNamingStyle: EventNamingStyle;
    get subscribedEvents(): PubSubEvent[];
    get subscribedEventNames(): string[];
    constructor(elementSource?: Element);
    /**
     * Method to publish a message via a dispatchEvent.
     * We return the dispatched event in a Promise with a delayed cycle and we do this because
     * most framework require a cycle before the binding is processed and binding a spinner end up showing too late
     * for example this is used for these events: onBeforeFilterClear, onBeforeFilterChange, onBeforeToggleTreeCollapse, onBeforeSortChange
     * @param event The event or channel to publish to.
     * @param data The data to publish on the channel.
     */
    publish<T = any>(eventName: string, data?: T): Promise<boolean>;
    /**
     * Subscribes to a message channel or message type.
     * @param event The event channel or event data type.
     * @param callback The callback to be invoked when the specified message is published.
     * @return possibly a Subscription
     */
    subscribe<T = any>(eventName: string, callback: (data: any) => void): any;
    /**
     * Subscribes to a custom event message channel or message type.
     * This is similar to the "subscribe" except that the callback receives an event typed as CustomEventInit and the data will be inside its "event.detail"
     * @param event The event channel or event data type.
     * @param callback The callback to be invoked when the specified message is published.
     * @return possibly a Subscription
     */
    subscribeEvent<T = any>(eventName: string, listener: (event: CustomEventInit<T>) => void): any | void;
    /**
     * Unsubscribes a message name
     * @param event The event name
     * @return possibly a Subscription
     */
    unsubscribe(eventName: string, listener: (event: CustomEventInit) => void): void;
    /** Unsubscribes all subscriptions that currently exists */
    unsubscribeAll(subscriptions?: EventSubscription[]): void;
    /** Dispatch of Custom Event, which by default will bubble up & is cancelable */
    dispatchCustomEvent<T = any>(eventName: string, data?: T, isBubbling?: boolean, isCancelable?: boolean): boolean;
    /** Get the event name by the convention defined, it could be: all lower case, camelCase, PascalCase or kebab-case */
    getEventNameByNamingConvention(inputEventName: string, eventNamePrefix: string): string;
}
export {};
