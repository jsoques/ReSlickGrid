import 'slickgrid/plugins/slick.cellrangedecorator';
import 'slickgrid/plugins/slick.cellrangeselector';
import 'slickgrid/plugins/slick.cellselectionmodel';
import { Column, Extension, ExtensionModel, GridOption } from '../interfaces/index';
import { ExtensionList, ExtensionName, SlickControlList, SlickPluginList } from '../enums/index';
import { AutoTooltipExtension, CellExternalCopyManagerExtension, CellMenuExtension, CheckboxSelectorExtension, ColumnPickerExtension, ContextMenuExtension, DraggableGroupingExtension, GridMenuExtension, GroupItemMetaProviderExtension, HeaderButtonExtension, HeaderMenuExtension, RowDetailViewExtension, RowMoveManagerExtension, RowSelectionExtension } from '../extensions/index';
import { SharedService } from './shared.service';
import { TranslaterService } from './translater.service';
interface ExtensionWithColumnIndexPosition {
    name: ExtensionName;
    columnIndexPosition: number;
    extension: CheckboxSelectorExtension | RowDetailViewExtension | RowMoveManagerExtension;
}
export declare class ExtensionService {
    protected readonly autoTooltipExtension: AutoTooltipExtension;
    protected readonly cellExternalCopyExtension: CellExternalCopyManagerExtension;
    protected readonly cellMenuExtension: CellMenuExtension;
    protected readonly checkboxSelectorExtension: CheckboxSelectorExtension;
    protected readonly columnPickerExtension: ColumnPickerExtension;
    protected readonly contextMenuExtension: ContextMenuExtension;
    protected readonly draggableGroupingExtension: DraggableGroupingExtension;
    protected readonly gridMenuExtension: GridMenuExtension;
    protected readonly groupItemMetaExtension: GroupItemMetaProviderExtension;
    protected readonly headerButtonExtension: HeaderButtonExtension;
    protected readonly headerMenuExtension: HeaderMenuExtension;
    protected readonly rowDetailViewExtension: RowDetailViewExtension;
    protected readonly rowMoveManagerExtension: RowMoveManagerExtension;
    protected readonly rowSelectionExtension: RowSelectionExtension;
    protected readonly sharedService: SharedService;
    protected readonly translaterService?: TranslaterService | undefined;
    protected _extensionCreatedList: ExtensionList<any, any>;
    protected _extensionList: ExtensionList<any, any>;
    get extensionList(): ExtensionList<any, any>;
    constructor(autoTooltipExtension: AutoTooltipExtension, cellExternalCopyExtension: CellExternalCopyManagerExtension, cellMenuExtension: CellMenuExtension, checkboxSelectorExtension: CheckboxSelectorExtension, columnPickerExtension: ColumnPickerExtension, contextMenuExtension: ContextMenuExtension, draggableGroupingExtension: DraggableGroupingExtension, gridMenuExtension: GridMenuExtension, groupItemMetaExtension: GroupItemMetaProviderExtension, headerButtonExtension: HeaderButtonExtension, headerMenuExtension: HeaderMenuExtension, rowDetailViewExtension: RowDetailViewExtension, rowMoveManagerExtension: RowMoveManagerExtension, rowSelectionExtension: RowSelectionExtension, sharedService: SharedService, translaterService?: TranslaterService | undefined);
    /** Dispose of all the controls & plugins */
    dispose(): void;
    /** Get all columns (includes visible and non-visible) */
    getAllColumns(): Column[];
    /** Get only visible columns */
    getVisibleColumns(): Column[];
    /**
     * Get an Extension by it's name
     *  @param name
     */
    getExtensionByName<P extends (SlickControlList | SlickPluginList) = any, E extends Extension = Extension>(name: ExtensionName): ExtensionModel<P, E> | undefined;
    /**
     * Get the instance of the SlickGrid addon (control or plugin).
     * This is the raw addon coming directly from SlickGrid itself, not to confuse with Slickgrid-Universal extension
     *  @param name
     */
    getSlickgridAddonInstance(name: ExtensionName): any;
    /** Auto-resize all the column in the grid to fit the grid width */
    autoResizeColumns(): void;
    /** Bind/Create different Controls or Plugins after the Grid is created */
    bindDifferentExtensions(): void;
    /**
     * Bind/Create certain plugins before the Grid creation to avoid having odd behaviors.
     * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then
     * @param columnDefinitions
     * @param gridOptions
     */
    createExtensionsBeforeGridCreation(columnDefinitions: Column[], gridOptions: GridOption): void;
    /** Hide a column from the grid */
    hideColumn(column: Column): void;
    /** Refresh the dataset through the Backend Service */
    refreshBackendDataset(gridOptions?: GridOption): void;
    /**
     * Remove a column from the grid by it's index in the grid
     * @param columns input
     * @param index
     */
    removeColumnByIndex(columns: Column[], index: number): Column[];
    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */
    translateCellMenu(): void;
    /** Translate the Column Picker and it's last 2 checkboxes */
    translateColumnPicker(): void;
    /** Translate the Context Menu titles, we need to loop through all column definition to re-translate them */
    translateContextMenu(): void;
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateGridMenu(): void;
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateHeaderMenu(): void;
    /**
     * Translate manually the header titles.
     * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale
     * @param locale to use
     * @param new column definitions (optional)
     */
    translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]): void;
    /**
     * Render (or re-render) the column headers from column definitions.
     * calling setColumns() will trigger a grid re-render
     */
    renderColumnHeaders(newColumnDefinitions?: Column[], forceColumnDefinitionsOverwrite?: boolean): void;
    /**
     * Some extension (feature) have specific `columnIndexPosition` that the developer want to use, we need to make sure these indexes are respected in the column definitions in the order provided.
     * The following 3 features could have that optional `columnIndexPosition` and we need to respect their column order, we will first sort by their optional order and only after we will create them by their specific order.
     * We'll process them by their position (if provided, else use same order that they were inserted)
     * @param featureWithIndexPositions
     * @param columnDefinitions
     * @param gridOptions
     */
    protected createExtensionByTheirColumnIndex(featureWithIndexPositions: ExtensionWithColumnIndexPosition[], columnDefinitions: Column[], gridOptions: GridOption): void;
    /**
     * Get an Extension that was created by calling its "create" method (there are only 3 extensions which uses this method)
     *  @param name
     */
    protected getCreatedExtensionByName<P extends (SlickControlList | SlickPluginList) = any, E extends Extension = any>(name: ExtensionName): ExtensionModel<P, E> | undefined;
    /**
     * Dispose of previous extension/addon instance, then re-register it and don't forget to overwrite previous instance ref
     * @param externalExtension - extension instance
     * @param extensionName - extension name
     */
    protected recreateExternalAddon(externalExtension: Extension, extensionName: ExtensionName): void;
    /** Translate an array of items from an input key and assign translated value to the output key */
    protected translateItems(items: any[], inputKey: string, outputKey: string): void;
}
export {};
