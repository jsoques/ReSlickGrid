export class BindingEventService {
    constructor() {
        this._boundedEvents = [];
    }
    /** Bind an event listener to any element */
    bind(element, eventNameOrNames, listener, options) {
        const eventNames = (Array.isArray(eventNameOrNames)) ? eventNameOrNames : [eventNameOrNames];
        for (const eventName of eventNames) {
            element.addEventListener(eventName, listener, options);
            this._boundedEvents.push({ element, eventName, listener });
        }
    }
    /** Unbind all will remove every every event handlers that were bounded earlier */
    unbindAll() {
        while (this._boundedEvents.length > 0) {
            const boundedEvent = this._boundedEvents.pop();
            const { element, eventName, listener } = boundedEvent;
            if (element === null || element === void 0 ? void 0 : element.removeEventListener) {
                element.removeEventListener(eventName, listener);
            }
        }
    }
}
//# sourceMappingURL=bindingEvent.service.js.map