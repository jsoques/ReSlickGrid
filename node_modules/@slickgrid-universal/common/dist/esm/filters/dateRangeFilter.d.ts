import { Instance as FlatpickrInstance } from 'flatpickr/dist/types/instance';
import { OperatorString, OperatorType, SearchTerm } from '../enums/index';
import { Column, ColumnFilter, Filter, FilterArguments, FilterCallback, FlatpickrOption, GridOption, SlickGrid } from '../interfaces/index';
import { BindingEventService } from '../services/bindingEvent.service';
import { TranslaterService } from '../services/translater.service';
export declare class DateRangeFilter implements Filter {
    protected readonly translaterService: TranslaterService;
    protected _bindEventService: BindingEventService;
    protected _clearFilterTriggered: boolean;
    protected _currentValue?: string;
    protected _currentDates?: Date[];
    protected _currentDateStrings?: string[];
    protected _flatpickrOptions: FlatpickrOption;
    protected _filterElm: HTMLDivElement;
    protected _filterDivInputElm: HTMLDivElement;
    protected _shouldTriggerQuery: boolean;
    grid: SlickGrid;
    flatInstance: FlatpickrInstance;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    constructor(translaterService: TranslaterService);
    /** Getter for the Grid Options pulled through the Grid Object */
    protected get gridOptions(): GridOption;
    /** Getter for the Column Filter */
    get columnFilter(): ColumnFilter;
    /** Getter for the Current Dates selected */
    get currentDates(): Date[] | undefined;
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator(): OperatorType | OperatorString;
    /** Getter for the Flatpickr Options */
    get flatpickrOptions(): FlatpickrOption;
    /** Getter of the Operator to use when doing the filter comparing */
    get operator(): OperatorType | OperatorString;
    /** Setter for the filter operator */
    set operator(operator: OperatorType | OperatorString);
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    hide(): void;
    show(): void;
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    setValues(searchTerms: SearchTerm[] | SearchTerm | undefined, operator?: OperatorType | OperatorString): void;
    protected buildDatePickerInput(searchTerms?: SearchTerm | SearchTerm[]): HTMLDivElement;
    /**
     * Create the DOM element
     * @params searchTerms
     */
    protected createDomElement(searchTerms?: SearchTerm[]): HTMLDivElement;
    protected onTriggerEvent(e: Event | undefined): void;
}
