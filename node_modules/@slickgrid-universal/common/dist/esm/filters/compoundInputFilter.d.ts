/// <reference types="node" />
import { OperatorString, OperatorType, SearchTerm } from '../enums/index';
import { Column, ColumnFilter, Filter, FilterArguments, FilterCallback, GridOption, Locale, OperatorDetail, SlickGrid } from '../interfaces/index';
import { BindingEventService } from '../services/bindingEvent.service';
import { TranslaterService } from '../services/translater.service';
export declare class CompoundInputFilter implements Filter {
    protected readonly translaterService: TranslaterService;
    protected _bindEventService: BindingEventService;
    protected _clearFilterTriggered: boolean;
    protected _debounceTypingDelay: number;
    protected _shouldTriggerQuery: boolean;
    protected _inputType: string;
    protected _filterElm: HTMLDivElement;
    protected _filterInputElm: HTMLInputElement;
    protected _selectOperatorElm: HTMLSelectElement;
    protected _operator?: OperatorType | OperatorString;
    grid: SlickGrid;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    timer?: NodeJS.Timeout;
    constructor(translaterService: TranslaterService);
    /** Getter for the Grid Options pulled through the Grid Object */
    protected get gridOptions(): GridOption;
    /** Getter for the Column Filter */
    get columnFilter(): ColumnFilter;
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator(): OperatorType | OperatorString;
    /** Getter of input type (text, number, password) */
    get inputType(): string;
    /** Setter of input type (text, number, password) */
    set inputType(type: string);
    /** Getter for the single Locale texts provided by the user in main file or else use default English locales via the Constants */
    get locales(): Locale;
    /** Getter of the Operator to use when doing the filter comparing */
    get operator(): OperatorType | OperatorString;
    /** Setter of the Operator to use when doing the filter comparing */
    set operator(op: OperatorType | OperatorString);
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /** Set value(s) on the DOM element */
    setValues(values: SearchTerm[] | SearchTerm, operator?: OperatorType | OperatorString): void;
    protected buildInputElement(): HTMLInputElement;
    /** Get the available operator option values to populate the operator select dropdown list */
    protected getOperatorOptionValues(): OperatorDetail[];
    /** Get Locale, Translated or a Default Text if first two aren't detected */
    protected getOutputText(translationKey: string, localeText: string, defaultText: string): string;
    /**
     * Create the DOM element
     */
    protected createDomElement(searchTerm?: SearchTerm): HTMLDivElement;
    /**
     * Event trigger, could be called by the Operator dropdown or the input itself and we will cover the following (keyup, change, mousewheel & spinner)
     * We will trigger the Filter Service callback from this handler
     */
    protected onTriggerEvent(event: Event | undefined): void;
}
