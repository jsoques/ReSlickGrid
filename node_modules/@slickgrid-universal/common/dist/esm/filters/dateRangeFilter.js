import * as flatpickr_ from 'flatpickr';
import * as moment_ from 'moment-mini';
const flatpickr = (flatpickr_ && flatpickr_['default'] || flatpickr_); // patch for rollup
const moment = moment_['default'] || moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
import { FieldType, OperatorType, } from '../enums/index';
import { destroyObjectDomElementProps, emptyElement, mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from '../services/utilities';
import { BindingEventService } from '../services/bindingEvent.service';
export class DateRangeFilter {
    constructor(translaterService) {
        this.translaterService = translaterService;
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
        this.searchTerms = [];
        this._bindEventService = new BindingEventService();
    }
    /** Getter for the Grid Options pulled through the Grid Object */
    get gridOptions() {
        return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
    }
    /** Getter for the Column Filter */
    get columnFilter() {
        return this.columnDef && this.columnDef.filter || {};
    }
    /** Getter for the Current Dates selected */
    get currentDates() {
        return this._currentDates;
    }
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator() {
        return this.gridOptions.defaultFilterRangeOperator || OperatorType.rangeInclusive;
    }
    /** Getter for the Flatpickr Options */
    get flatpickrOptions() {
        return this._flatpickrOptions || {};
    }
    /** Getter of the Operator to use when doing the filter comparing */
    get operator() {
        var _a, _b;
        return (_b = (_a = this.columnFilter) === null || _a === void 0 ? void 0 : _a.operator) !== null && _b !== void 0 ? _b : this.defaultOperator;
    }
    /** Setter for the filter operator */
    set operator(operator) {
        if (this.columnFilter) {
            this.columnFilter.operator = operator;
        }
    }
    /**
     * Initialize the Filter
     */
    init(args) {
        if (!args) {
            throw new Error('[Slickgrid-Universal] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // step 1, create the DOM Element of the filter which contain the compound Operator+Input
        this._filterElm = this.createDomElement(this.searchTerms);
        // step 3, subscribe to the keyup event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this._bindEventService.bind(this._filterDivInputElm, 'keyup', this.onTriggerEvent.bind(this));
    }
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery = true) {
        if (this.flatInstance) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            this.flatInstance.clear();
        }
    }
    /**
     * destroy the filter
     */
    destroy() {
        var _a, _b, _c;
        this._bindEventService.unbindAll();
        if ((_a = this.flatInstance) === null || _a === void 0 ? void 0 : _a.destroy) {
            this.flatInstance.destroy();
            if (this.flatInstance.element) {
                destroyObjectDomElementProps(this.flatInstance);
            }
        }
        (_c = (_b = this._filterElm) === null || _b === void 0 ? void 0 : _b.remove) === null || _c === void 0 ? void 0 : _c.call(_b);
    }
    hide() {
        if (this.flatInstance && typeof this.flatInstance.close === 'function') {
            this.flatInstance.close();
        }
    }
    show() {
        if (this.flatInstance && typeof this.flatInstance.open === 'function') {
            this.flatInstance.open();
        }
    }
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    setValues(searchTerms, operator) {
        let pickerValues = [];
        // get the picker values, if it's a string with the "..", we'll do the split else we'll use the array of search terms
        if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && searchTerms[0].indexOf('..') > 0) {
            pickerValues = (typeof searchTerms === 'string') ? [searchTerms] : searchTerms[0].split('..');
        }
        else if (Array.isArray(searchTerms)) {
            pickerValues = searchTerms;
        }
        if (this.flatInstance && searchTerms) {
            this._currentDates = pickerValues;
            this.flatInstance.setDate(pickerValues);
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    }
    //
    // protected functions
    // ------------------
    buildDatePickerInput(searchTerms) {
        var _a, _b, _c, _d, _e;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnFilter.type || this.columnDef.type || FieldType.dateIso);
        const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnFilter.type || this.columnDef.type || FieldType.dateUtc);
        const userFilterOptions = (this.columnFilter && this.columnFilter.filterOptions || {});
        // get current locale, if user defined a custom locale just use or get it the Translate Service if it exist else just use English
        let currentLocale = ((_c = userFilterOptions === null || userFilterOptions === void 0 ? void 0 : userFilterOptions.locale) !== null && _c !== void 0 ? _c : (_e = (_d = this.translaterService) === null || _d === void 0 ? void 0 : _d.getCurrentLanguage) === null || _e === void 0 ? void 0 : _e.call(_d)) || this.gridOptions.locale || 'en';
        if (currentLocale.length > 2) {
            currentLocale = currentLocale.substring(0, 2);
        }
        let pickerValues = [];
        // get the picker values, if it's a string with the "..", we'll do the split else we'll use the array of search terms
        if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && searchTerms[0].indexOf('..') > 0) {
            pickerValues = (typeof searchTerms === 'string') ? [searchTerms] : searchTerms[0].split('..');
        }
        else if (Array.isArray(searchTerms)) {
            pickerValues = searchTerms;
        }
        // if we are preloading searchTerms, we'll keep them for reference
        if (pickerValues) {
            this._currentDates = pickerValues;
            const outFormat = mapMomentDateFormatWithFieldType(this.columnFilter.type || this.columnDef.type || FieldType.dateIso);
            this._currentDateStrings = pickerValues.map(date => moment(date).format(outFormat));
        }
        const pickerOptions = {
            defaultDate: (pickerValues || ''),
            altInput: true,
            altFormat: outputFormat,
            dateFormat: inputFormat,
            mode: 'range',
            wrap: true,
            closeOnSelect: true,
            locale: currentLocale,
            onChange: (selectedDates) => {
                if (Array.isArray(selectedDates)) {
                    this._currentDates = selectedDates;
                    const outFormat = mapMomentDateFormatWithFieldType(this.columnDef.outputType || this.columnFilter.type || this.columnDef.type || FieldType.dateIso);
                    this._currentDateStrings = selectedDates.map(date => moment(date).format(outFormat));
                    this._currentValue = this._currentDateStrings.join('..');
                }
                // when using the time picker, we can simulate a keyup event to avoid multiple backend request
                // since backend request are only executed after user start typing, changing the time should be treated the same way
                const newEvent = pickerOptions.enableTime ? new CustomEvent('keyup') : undefined;
                this.onTriggerEvent(newEvent);
            },
            errorHandler: (error) => {
                if (error.toString().includes('invalid locale')) {
                    console.warn(`[Slickgrid-Universal] Flatpickr missing locale imports (${currentLocale}), will revert to English as the default locale.
          See Flatpickr Localization for more info, for example if we want to use French, then we can import it with:  import 'flatpickr/dist/l10n/fr';`);
                }
            }
        };
        // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)
        if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {
            pickerOptions.enableTime = true;
        }
        // merge options with optional user's custom options
        this._flatpickrOptions = { ...pickerOptions, ...userFilterOptions };
        let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';
        if (this.columnFilter && this.columnFilter.placeholder) {
            placeholder = this.columnFilter.placeholder;
        }
        const filterDivInputElm = document.createElement('div');
        filterDivInputElm.className = `flatpickr search-filter filter-${columnId}`;
        const inputElm = document.createElement('input');
        inputElm.type = 'text';
        inputElm.className = 'form-control';
        inputElm.dataset.input = '';
        inputElm.placeholder = placeholder;
        filterDivInputElm.appendChild(inputElm);
        this.flatInstance = flatpickr(filterDivInputElm, this._flatpickrOptions);
        return filterDivInputElm;
    }
    /**
     * Create the DOM element
     * @params searchTerms
     */
    createDomElement(searchTerms) {
        var _a, _b;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const headerElm = this.grid.getHeaderRowColumn(columnId);
        emptyElement(headerElm);
        // create the DOM Select dropdown for the Operator
        this._filterDivInputElm = this.buildDatePickerInput(searchTerms);
        /* the DOM element final structure will be
          <div class=flatpickr>
            <input type="text" class="form-control" data-input>
          </div>
        */
        // create the DOM element & add an ID and filter class
        this._filterDivInputElm.dataset.columnid = `${columnId}`;
        // if there's a search term, we will add the "filled" class for styling purposes
        if (Array.isArray(searchTerms) && searchTerms.length > 0 && searchTerms[0] !== '') {
            this._filterDivInputElm.classList.add('filled');
            this._currentDates = searchTerms;
            this._currentValue = searchTerms[0];
        }
        // append the new DOM element to the header row
        if (this._filterDivInputElm) {
            headerElm.appendChild(this._filterDivInputElm);
        }
        return this._filterDivInputElm;
    }
    onTriggerEvent(e) {
        if (this._clearFilterTriggered) {
            this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });
            this._filterElm.classList.remove('filled');
        }
        else {
            (this._currentDateStrings) ? this._filterElm.classList.add('filled') : this._filterElm.classList.remove('filled');
            this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentDateStrings ? this._currentDateStrings : [this._currentValue]), operator: this.operator || '', shouldTriggerQuery: this._shouldTriggerQuery });
        }
        // reset both flags for next use
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
}
//# sourceMappingURL=dateRangeFilter.js.map