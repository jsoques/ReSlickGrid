import { dequal } from 'dequal/lite';
import { Constants } from '../constants';
import { FieldType } from './../enums/index';
import { buildSelectEditorOrFilterDomElement, CollectionService, findOrDefault } from '../services/index';
import { getDescendantProperty, getTranslationPrefix, setDeepValue } from '../services/utilities';
/**
 * Slickgrid editor class for multiple/single select lists
 */
export class SelectEditor {
    constructor(args, isMultipleSelect) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.args = args;
        this.isMultipleSelect = isMultipleSelect;
        this._isValueTouched = false;
        // flag to signal that the editor is destroying itself, helps prevent
        // commit changes from being called twice and erroring
        this._isDisposing = false;
        /** is the Editor disabled? */
        this.disabled = false;
        /** Do we translate the label? */
        this.enableTranslateLabel = false;
        /** Final collection displayed in the UI, that is after processing filter/sort/override */
        this.finalCollection = [];
        if (!args) {
            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (this.grid.getOptions() || {});
        if ((_a = this.gridOptions) === null || _a === void 0 ? void 0 : _a.translater) {
            this._translaterService = this.gridOptions.translater;
        }
        // get locales provided by user in main file or else use default English locales via the Constants
        this._locales = this.gridOptions.locales || Constants.locales;
        // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)
        const columnId = (_c = (_b = this.columnDef) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : '';
        this.elementName = `editor-${columnId}`;
        const compositeEditorOptions = this.args.compositeEditorOptions;
        const libOptions = {
            autoAdjustDropHeight: true,
            autoAdjustDropPosition: true,
            autoAdjustDropWidthByTextSize: true,
            container: 'body',
            filter: false,
            maxHeight: 275,
            name: this.elementName,
            single: true,
            textTemplate: ($elm) => {
                var _a, _b;
                // render HTML code or not, by default it is sanitized and won't be rendered
                const isRenderHtmlEnabled = (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.enableRenderHtml) !== null && _b !== void 0 ? _b : false;
                return isRenderHtmlEnabled ? $elm.text() : $elm.html();
            },
            onClick: () => this._isValueTouched = true,
            onCheckAll: () => this._isValueTouched = true,
            onUncheckAll: () => this._isValueTouched = true,
            onClose: () => {
                if (compositeEditorOptions) {
                    this.handleChangeOnCompositeEditor(compositeEditorOptions);
                }
                else {
                    this.save();
                }
            },
        };
        if (isMultipleSelect) {
            libOptions.single = false;
            libOptions.addTitle = true;
            libOptions.okButton = true;
            libOptions.selectAllDelimiter = ['', ''];
            if (this._translaterService && this._translaterService.getCurrentLanguage && this._translaterService.getCurrentLanguage()) {
                const translationPrefix = getTranslationPrefix(this.gridOptions);
                libOptions.countSelected = this._translaterService.translate(`${translationPrefix}X_OF_Y_SELECTED`);
                libOptions.allSelected = this._translaterService.translate(`${translationPrefix}ALL_SELECTED`);
                libOptions.selectAllText = this._translaterService.translate(`${translationPrefix}SELECT_ALL`);
                libOptions.okButtonText = this._translaterService.translate(`${translationPrefix}OK`);
            }
            else {
                libOptions.countSelected = (_d = this._locales) === null || _d === void 0 ? void 0 : _d.TEXT_X_OF_Y_SELECTED;
                libOptions.allSelected = (_e = this._locales) === null || _e === void 0 ? void 0 : _e.TEXT_ALL_SELECTED;
                libOptions.selectAllText = (_f = this._locales) === null || _f === void 0 ? void 0 : _f.TEXT_SELECT_ALL;
                libOptions.okButtonText = (_g = this._locales) === null || _g === void 0 ? void 0 : _g.TEXT_OK;
            }
        }
        // assign the multiple select lib options
        this.defaultOptions = libOptions;
        this.init();
    }
    /** Get the Collection */
    get collection() {
        var _a, _b;
        return (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.collection) !== null && _b !== void 0 ? _b : [];
    }
    /** Getter for the Collection Options */
    get collectionOptions() {
        var _a;
        return (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.collectionOptions;
    }
    /** Get Column Definition object */
    get columnDef() {
        return this.args.column;
    }
    /** Get Column Editor object */
    get columnEditor() {
        var _a, _b;
        return (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.internalColumnEditor) !== null && _b !== void 0 ? _b : {};
    }
    /** Getter for item data context object */
    get dataContext() {
        return this.args.item;
    }
    /** Getter for the Editor DOM Element */
    get editorDomElement() {
        return this.$editorElm;
    }
    get isCompositeEditor() {
        var _a;
        return !!((_a = this.args) === null || _a === void 0 ? void 0 : _a.compositeEditorOptions);
    }
    /** Getter for the Custom Structure if exist */
    get customStructure() {
        var _a, _b;
        return (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.internalColumnEditor) === null || _b === void 0 ? void 0 : _b.customStructure;
    }
    get hasAutoCommitEdit() {
        var _a;
        return (_a = this.gridOptions.autoCommitEdit) !== null && _a !== void 0 ? _a : false;
    }
    /**
     * The current selected values (multiple select) from the collection
     */
    get currentValues() {
        var _a, _b, _c, _d, _e;
        const elmValue = (_a = this.$editorElm) === null || _a === void 0 ? void 0 : _a.val();
        // collection of strings, just return the filtered string that are equals
        if (this.collection.every(x => typeof x === 'string')) {
            return this.collection.filter(c => elmValue.indexOf(c === null || c === void 0 ? void 0 : c.toString()) !== -1);
        }
        // collection of label/value pair
        const separatorBetweenLabels = (_c = (_b = this.collectionOptions) === null || _b === void 0 ? void 0 : _b.separatorBetweenTextLabels) !== null && _c !== void 0 ? _c : '';
        const isIncludingPrefixSuffix = (_e = (_d = this.collectionOptions) === null || _d === void 0 ? void 0 : _d.includePrefixSuffixToSelectedValues) !== null && _e !== void 0 ? _e : false;
        return this.collection
            .filter(c => { var _a; return elmValue.indexOf(c.hasOwnProperty(this.valueName) && ((_a = c[this.valueName]) === null || _a === void 0 ? void 0 : _a.toString())) !== -1; })
            .map(c => {
            var _a, _b, _c, _d;
            const labelText = c[this.valueName];
            let prefixText = c[this.labelPrefixName] || '';
            let suffixText = c[this.labelSuffixName] || '';
            // when it's a complex object, then pull the object name only, e.g.: "user.firstName" => "user"
            const fieldName = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.field) !== null && _b !== void 0 ? _b : '';
            // is the field a complex object, "address.streetNumber"
            const isComplexObject = (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0;
            const serializeComplexValueFormat = (_d = (_c = this.columnEditor) === null || _c === void 0 ? void 0 : _c.serializeComplexValueFormat) !== null && _d !== void 0 ? _d : 'object';
            if (isComplexObject && typeof c === 'object' && serializeComplexValueFormat === 'object') {
                return c;
            }
            // also translate prefix/suffix if enableTranslateLabel is true and text is a string
            prefixText = (this.enableTranslateLabel && this._translaterService && prefixText && typeof prefixText === 'string') ? this._translaterService.translate(prefixText || ' ') : prefixText;
            suffixText = (this.enableTranslateLabel && this._translaterService && suffixText && typeof suffixText === 'string') ? this._translaterService.translate(suffixText || ' ') : suffixText;
            if (isIncludingPrefixSuffix) {
                const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text); // add to a temp array for joining purpose and filter out empty text
                return tmpOptionArray.join(separatorBetweenLabels);
            }
            return labelText;
        });
    }
    /**
     * The current selected values (single select) from the collection
     */
    get currentValue() {
        var _a, _b, _c, _d, _e, _f;
        const elmValue = this.$editorElm.val();
        const fieldName = this.columnDef && this.columnDef.field;
        if (fieldName !== undefined) {
            // collection of strings, just return the filtered string that are equals
            if (this.collection.every(x => typeof x === 'string')) {
                return findOrDefault(this.collection, (c) => { var _a; return ((_a = c === null || c === void 0 ? void 0 : c.toString) === null || _a === void 0 ? void 0 : _a.call(c)) === elmValue; });
            }
            // collection of label/value pair
            const separatorBetweenLabels = (_b = (_a = this.collectionOptions) === null || _a === void 0 ? void 0 : _a.separatorBetweenTextLabels) !== null && _b !== void 0 ? _b : '';
            const isIncludingPrefixSuffix = (_d = (_c = this.collectionOptions) === null || _c === void 0 ? void 0 : _c.includePrefixSuffixToSelectedValues) !== null && _d !== void 0 ? _d : false;
            const itemFound = findOrDefault(this.collection, (c) => { var _a; return c.hasOwnProperty(this.valueName) && ((_a = c[this.valueName]) === null || _a === void 0 ? void 0 : _a.toString()) === elmValue; });
            // is the field a complex object, "address.streetNumber"
            const isComplexObject = (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0;
            const serializeComplexValueFormat = (_f = (_e = this.columnEditor) === null || _e === void 0 ? void 0 : _e.serializeComplexValueFormat) !== null && _f !== void 0 ? _f : 'object';
            if (isComplexObject && typeof itemFound === 'object' && serializeComplexValueFormat === 'object') {
                return itemFound;
            }
            else if (itemFound && itemFound.hasOwnProperty(this.valueName)) {
                const labelText = itemFound[this.valueName];
                if (isIncludingPrefixSuffix) {
                    let prefixText = itemFound[this.labelPrefixName] || '';
                    let suffixText = itemFound[this.labelSuffixName] || '';
                    // also translate prefix/suffix if enableTranslateLabel is true and text is a string
                    prefixText = (this.enableTranslateLabel && this._translaterService && prefixText && typeof prefixText === 'string') ? this._translaterService.translate(prefixText || ' ') : prefixText;
                    suffixText = (this.enableTranslateLabel && this._translaterService && suffixText && typeof suffixText === 'string') ? this._translaterService.translate(suffixText || ' ') : suffixText;
                    // add to a temp array for joining purpose and filter out empty text
                    const tmpOptionArray = [prefixText, labelText, suffixText].filter((text) => text);
                    return tmpOptionArray.join(separatorBetweenLabels);
                }
                return labelText;
            }
        }
        return '';
    }
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    get validator() {
        var _a, _b, _c;
        return (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.validator) !== null && _b !== void 0 ? _b : (_c = this.columnDef) === null || _c === void 0 ? void 0 : _c.validator;
    }
    init() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        if (!this.columnDef || !this.columnDef.internalColumnEditor || (!this.columnDef.internalColumnEditor.collection && !this.columnDef.internalColumnEditor.collectionAsync)) {
            throw new Error(`[Slickgrid-Universal] You need to pass a "collection" (or "collectionAsync") inside Column Definition Editor for the MultipleSelect/SingleSelect Editor to work correctly.
      Also each option should include a value/label pair (or value/labelKey when using Locale).
      For example: { editor: { collection: [{ value: true, label: 'True' },{ value: false, label: 'False'}] } }`);
        }
        this._collectionService = new CollectionService(this._translaterService);
        this.enableTranslateLabel = (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.enableTranslateLabel) !== null && _b !== void 0 ? _b : false;
        this.labelName = (_d = (_c = this.customStructure) === null || _c === void 0 ? void 0 : _c.label) !== null && _d !== void 0 ? _d : 'label';
        this.labelPrefixName = (_f = (_e = this.customStructure) === null || _e === void 0 ? void 0 : _e.labelPrefix) !== null && _f !== void 0 ? _f : 'labelPrefix';
        this.labelSuffixName = (_h = (_g = this.customStructure) === null || _g === void 0 ? void 0 : _g.labelSuffix) !== null && _h !== void 0 ? _h : 'labelSuffix';
        this.optionLabel = (_k = (_j = this.customStructure) === null || _j === void 0 ? void 0 : _j.optionLabel) !== null && _k !== void 0 ? _k : 'value';
        this.valueName = (_m = (_l = this.customStructure) === null || _l === void 0 ? void 0 : _l.value) !== null && _m !== void 0 ? _m : 'value';
        if (this.enableTranslateLabel && (!this._translaterService || typeof this._translaterService.translate !== 'function')) {
            throw new Error('[Slickgrid-Universal] requires a Translate Service to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        // always render the Select (dropdown) DOM element, even if user passed a "collectionAsync",
        // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)
        this.renderDomElement(this.collection);
        // when having a collectionAsync and a collection that is empty, we'll toggle the Editor to disabled,
        // it will be re-enabled when we get the collection filled (in slick-vanilla-bundle on method "updateEditorCollection()")
        if (this.disabled || (((_o = this.columnEditor) === null || _o === void 0 ? void 0 : _o.collectionAsync) && Array.isArray(this.collection) && this.collection.length === 0)) {
            this.disable(true);
        }
    }
    getValue() {
        return (this.isMultipleSelect) ? this.currentValues : this.currentValue;
    }
    setValue(value, isApplyingValue = false, triggerOnCompositeEditorChange = true) {
        if (this.isMultipleSelect && Array.isArray(value)) {
            this.loadMultipleValues(value);
        }
        else {
            this.loadSingleValue(value);
        }
        if (isApplyingValue) {
            this.applyValue(this.args.item, this.serializeValue());
            // if it's set by a Composite Editor, then also trigger a change for it
            const compositeEditorOptions = this.args.compositeEditorOptions;
            if (compositeEditorOptions && triggerOnCompositeEditorChange) {
                this.handleChangeOnCompositeEditor(compositeEditorOptions, 'system');
            }
        }
    }
    hide() {
        if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('close');
        }
    }
    show() {
        if (!this.isCompositeEditor && this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('open');
        }
        else if (this.isCompositeEditor) {
            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor
            this.applyInputUsabilityState();
        }
    }
    applyValue(item, state) {
        var _a, _b, _c;
        const fieldName = this.columnDef && this.columnDef.field;
        const fieldType = this.columnDef && this.columnDef.type;
        let newValue = state;
        if (fieldName !== undefined) {
            // when the provided user defined the column field type as a possible number then try parsing the state value as that
            if ((fieldType === FieldType.number || fieldType === FieldType.integer || fieldType === FieldType.boolean) && !isNaN(parseFloat(state))) {
                newValue = parseFloat(state);
            }
            // when set as a multiple selection, we can assume that the 3rd party lib multiple-select will return a CSV string
            // we need to re-split that into an array to be the same as the original column
            if (this.isMultipleSelect && typeof state === 'string' && state.indexOf(',') >= 0) {
                newValue = state.split(',');
            }
            // is the field a complex object, "user.address.streetNumber"
            const isComplexObject = (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0;
            // validate the value before applying it (if not valid we'll set an empty string)
            const validation = this.validate(null, newValue);
            newValue = (validation === null || validation === void 0 ? void 0 : validation.valid) ? newValue : '';
            // set the new value to the item datacontext
            if (isComplexObject) {
                // when it's a complex object, user could override the object path (where the editable object is located)
                // else we use the path provided in the Field Column Definition
                const objectPath = (_c = (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.complexObjectPath) !== null && _b !== void 0 ? _b : fieldName) !== null && _c !== void 0 ? _c : '';
                setDeepValue(item, objectPath, newValue);
            }
            else {
                item[fieldName] = newValue;
            }
        }
    }
    destroy() {
        // when autoCommitEdit is enabled, we might end up leaving an editor without it being saved, if so do call a save before destroying
        // this mainly happens doing a blur or focusing on another cell in the grid (it won't come here if we click outside the grid, in the body)
        if (this.$editorElm && this.hasAutoCommitEdit && this.isValueChanged() && !this._isDisposing && !this.isCompositeEditor) {
            this._isDisposing = true; // change destroying flag to avoid infinite loop
            this.save(true);
        }
        this._isDisposing = true;
        if (this.$editorElm && typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('destroy');
            this.$editorElm.remove();
            const elementClassName = this.elementName.toString().replace('.', '\\.'); // make sure to escape any dot "." from CSS class to avoid console error
            $(`[name=${elementClassName}].ms-drop`).remove();
            this.$editorElm.remove();
            this.$editorElm = null;
        }
    }
    loadValue(item) {
        var _a, _b;
        const fieldName = this.columnDef && this.columnDef.field;
        // is the field a complex object, "address.streetNumber"
        const isComplexObject = fieldName !== undefined && (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0;
        if (item && fieldName !== undefined) {
            // when it's a complex object, user could override the object path (where the editable object is located)
            // else we use the path provided in the Field Column Definition
            const objectPath = (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.complexObjectPath) !== null && _b !== void 0 ? _b : fieldName;
            const currentValue = (isComplexObject) ? getDescendantProperty(item, objectPath) : (item.hasOwnProperty(fieldName) && item[fieldName]);
            const value = (isComplexObject && (currentValue === null || currentValue === void 0 ? void 0 : currentValue.hasOwnProperty(this.valueName))) ? currentValue[this.valueName] : currentValue;
            if (this.isMultipleSelect && Array.isArray(value)) {
                this.loadMultipleValues(value);
            }
            else {
                this.loadSingleValue(value);
            }
            this.refresh();
        }
    }
    loadMultipleValues(currentValues) {
        // convert to string because that is how the DOM will return these values
        if (Array.isArray(currentValues)) {
            // keep the default values in memory for references
            this.originalValue = currentValues.map((i) => i);
            this.$editorElm.multipleSelect('setSelects', currentValues);
            // if it's set by a Composite Editor, then also trigger a change for it
            const compositeEditorOptions = this.args.compositeEditorOptions;
            if (compositeEditorOptions) {
                this.handleChangeOnCompositeEditor(compositeEditorOptions);
            }
        }
    }
    loadSingleValue(currentValue) {
        // keep the default value in memory for references
        this.originalValue = typeof currentValue === 'number' ? `${currentValue}` : currentValue;
        this.$editorElm.val(currentValue);
        this.$editorElm.multipleSelect('setSelects', [currentValue]);
    }
    serializeValue() {
        return (this.isMultipleSelect) ? this.currentValues : this.currentValue;
    }
    /**
     * Dynamically change an Editor option, this is especially useful with Composite Editor
     * since this is the only way to change option after the Editor is created (for example dynamically change "minDate" or another Editor)
     * @param {string} optionName - MultipleSelect option name
     * @param {newValue} newValue - MultipleSelect new option value
     */
    changeEditorOption(optionName, newValue) {
        if (this.columnEditor) {
            if (!this.columnEditor.editorOptions) {
                this.columnEditor.editorOptions = {};
            }
            this.columnEditor.editorOptions[optionName] = newValue;
            this.editorElmOptions = { ...this.editorElmOptions, [optionName]: newValue };
            this.$editorElm.multipleSelect('refreshOptions', this.editorElmOptions);
        }
    }
    disable(isDisabled = true) {
        const prevIsDisabled = this.disabled;
        this.disabled = isDisabled;
        if (this.$editorElm) {
            if (isDisabled) {
                this.$editorElm.multipleSelect('disable');
                // clear select when it's newly disabled and not yet empty
                const currentValues = this.getValue();
                const isValueBlank = this.isMultipleSelect ? currentValues === [''] : currentValues === '';
                if (prevIsDisabled !== isDisabled && this.isCompositeEditor && !isValueBlank) {
                    this.reset('', true, true);
                }
            }
            else {
                this.$editorElm.multipleSelect('enable');
            }
        }
    }
    focus() {
        if (this.$editorElm && this.$editorElm.multipleSelect) {
            this.$editorElm.multipleSelect('focus');
        }
    }
    isValueChanged() {
        var _a;
        const valueSelection = (_a = this.$editorElm) === null || _a === void 0 ? void 0 : _a.multipleSelect('getSelects');
        if (this.isMultipleSelect) {
            const isEqual = dequal(valueSelection, this.originalValue);
            return !isEqual;
        }
        const value = Array.isArray(valueSelection) && valueSelection.length > 0 ? valueSelection[0] : undefined;
        return value !== undefined && value !== this.originalValue;
    }
    isValueTouched() {
        return this._isValueTouched;
    }
    /**
     * You can reset or clear the input value,
     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)
     */
    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {
        const inputValue = value !== null && value !== void 0 ? value : this.originalValue;
        if (this.$editorElm) {
            this.originalValue = this.isMultipleSelect ? (inputValue !== undefined ? [inputValue] : []) : inputValue;
            const selection = this.originalValue === undefined ? [] : [this.originalValue];
            this.$editorElm.multipleSelect('setSelects', selection);
        }
        this._isValueTouched = false;
        const compositeEditorOptions = this.args.compositeEditorOptions;
        if (compositeEditorOptions && triggerCompositeEventWhenExist) {
            const shouldDeleteFormValue = !clearByDisableCommand;
            this.handleChangeOnCompositeEditor(compositeEditorOptions, 'user', shouldDeleteFormValue);
        }
    }
    save(forceCommitCurrentEdit = false) {
        var _a;
        const validation = this.validate();
        const isValid = (_a = validation === null || validation === void 0 ? void 0 : validation.valid) !== null && _a !== void 0 ? _a : false;
        if ((!this._isDisposing || forceCommitCurrentEdit) && this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    }
    validate(_targetElm, inputValue) {
        var _a;
        const isRequired = this.isCompositeEditor ? false : (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.required;
        const elmValue = (inputValue !== undefined) ? inputValue : this.$editorElm && this.$editorElm.val && this.$editorElm.val();
        const errorMsg = this.columnEditor && this.columnEditor.errorMessage;
        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form
        if (this.isCompositeEditor) {
            this.applyInputUsabilityState();
        }
        // when field is disabled, we can assume it's valid
        if (this.disabled) {
            return { valid: true, msg: '' };
        }
        if (this.validator) {
            const value = (inputValue !== undefined) ? inputValue : (this.isMultipleSelect ? this.currentValues : this.currentValue);
            return this.validator(value, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && (elmValue === '' || (Array.isArray(elmValue) && elmValue.length === 0))) {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    }
    //
    // protected functions
    // ------------------
    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */
    applyInputUsabilityState() {
        const activeCell = this.grid.getActiveCell();
        const isCellEditable = this.grid.onBeforeEditCell.notify({
            ...activeCell, item: this.dataContext, column: this.args.column, grid: this.grid, target: 'composite', compositeEditorOptions: this.args.compositeEditorOptions
        });
        this.disable(isCellEditable === false);
    }
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    filterCollection(inputCollection) {
        var _a, _b;
        let outputCollection = inputCollection;
        // user might want to filter certain items of the collection
        if (this.columnEditor && this.columnEditor.collectionFilterBy) {
            const filterBy = this.columnEditor.collectionFilterBy;
            const filterCollectionBy = (_b = (_a = this.columnEditor.collectionOptions) === null || _a === void 0 ? void 0 : _a.filterResultAfterEachPass) !== null && _b !== void 0 ? _b : null;
            outputCollection = this._collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);
        }
        return outputCollection;
    }
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    sortCollection(inputCollection) {
        let outputCollection = inputCollection;
        // user might want to sort the collection
        if (this.columnDef && this.columnEditor && this.columnEditor.collectionSortBy) {
            const sortBy = this.columnEditor.collectionSortBy;
            outputCollection = this._collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);
        }
        return outputCollection;
    }
    renderDomElement(inputCollection) {
        var _a, _b, _c, _d, _e;
        if (!Array.isArray(inputCollection) && ((_a = this.collectionOptions) === null || _a === void 0 ? void 0 : _a.collectionInsideObjectProperty)) {
            const collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty;
            inputCollection = getDescendantProperty(inputCollection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(inputCollection)) {
            throw new Error('The "collection" passed to the Select Editor is not a valid array.');
        }
        // make a copy of the collection so that we don't impact SelectFilter, this could happen when calling "addBlankEntry" or "addCustomFirstEntry"
        let collection = [];
        if (inputCollection.length > 0) {
            collection = [...inputCollection];
        }
        // user can optionally add a blank entry at the beginning of the collection
        // make sure however that it wasn't added more than once
        if (((_b = this.collectionOptions) === null || _b === void 0 ? void 0 : _b.addBlankEntry) && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== '') {
            collection.unshift(this.createBlankEntry());
            this.collection.unshift(this.createBlankEntry()); // also make the change on the original collection
        }
        // user can optionally add his own custom entry at the beginning of the collection
        if (((_c = this.collectionOptions) === null || _c === void 0 ? void 0 : _c.addCustomFirstEntry) && Array.isArray(collection) && collection.length > 0 && collection[0][this.valueName] !== this.collectionOptions.addCustomFirstEntry[this.valueName]) {
            collection.unshift(this.collectionOptions.addCustomFirstEntry);
            this.collection.unshift(this.collectionOptions.addCustomFirstEntry); // also make the change on the original collection
        }
        // user can optionally add his own custom entry at the end of the collection
        if (((_d = this.collectionOptions) === null || _d === void 0 ? void 0 : _d.addCustomLastEntry) && Array.isArray(collection) && collection.length > 0) {
            const lastCollectionIndex = collection.length - 1;
            if (collection[lastCollectionIndex][this.valueName] !== this.collectionOptions.addCustomLastEntry[this.valueName]) {
                collection.push(this.collectionOptions.addCustomLastEntry);
            }
        }
        // assign the collection to a temp variable before filtering/sorting the collection
        let finalCollection = collection;
        // user might want to filter and/or sort certain items of the collection
        finalCollection = this.filterCollection(finalCollection);
        finalCollection = this.sortCollection(finalCollection);
        // user could also override the collection
        if ((_e = this.columnEditor) === null || _e === void 0 ? void 0 : _e.collectionOverride) {
            const overrideArgs = { column: this.columnDef, dataContext: this.dataContext, grid: this.grid, originalCollections: this.collection };
            if (this.args.compositeEditorOptions) {
                const { formValues, modalType } = this.args.compositeEditorOptions;
                overrideArgs.compositeEditorOptions = { formValues, modalType };
            }
            finalCollection = this.columnEditor.collectionOverride(finalCollection, overrideArgs);
        }
        // keep reference of the final collection displayed in the UI
        this.finalCollection = finalCollection;
        // step 1, create HTML string template
        const selectBuildResult = buildSelectEditorOrFilterDomElement('editor', finalCollection, this.columnDef, this.grid, this.isMultipleSelect, this._translaterService);
        // step 2, create the DOM Element of the editor
        // we will later also subscribe to the onClose event to save the Editor whenever that event is triggered
        this.createDomElement(selectBuildResult.selectElement);
    }
    /** Create a blank entry that can be added to the collection. It will also reuse the same collection structure provided by the user */
    createBlankEntry() {
        const blankEntry = {
            [this.labelName]: '',
            [this.valueName]: ''
        };
        if (this.labelPrefixName) {
            blankEntry[this.labelPrefixName] = '';
        }
        if (this.labelSuffixName) {
            blankEntry[this.labelSuffixName] = '';
        }
        return blankEntry;
    }
    /**
     * From the Select DOM Element created earlier, create a Multiple/Single Select Editor using the jQuery multiple-select.js lib
     * @param {Object} selectElement
     */
    createDomElement(selectElement) {
        var _a, _b;
        this.$editorElm = $(selectElement);
        if (this.$editorElm && typeof this.$editorElm.appendTo === 'function') {
            $(this.args.container).empty();
            this.$editorElm.appendTo(this.args.container);
        }
        // add placeholder when found
        const placeholder = (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.placeholder) !== null && _b !== void 0 ? _b : '';
        this.defaultOptions.placeholder = placeholder || '';
        if (typeof this.$editorElm.multipleSelect === 'function') {
            const editorOptions = (this.columnDef && this.columnDef.internalColumnEditor) ? this.columnDef.internalColumnEditor.editorOptions : {};
            this.editorElmOptions = { ...this.defaultOptions, ...editorOptions };
            this.$editorElm = this.$editorElm.multipleSelect(this.editorElmOptions);
            if (!this.isCompositeEditor) {
                setTimeout(() => this.show());
            }
        }
    }
    handleChangeOnCompositeEditor(compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {
        var _a, _b, _c, _d, _e;
        const activeCell = this.grid.getActiveCell();
        const column = this.args.column;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const item = this.dataContext;
        const grid = this.grid;
        const newValues = this.serializeValue();
        // when valid, we'll also apply the new value to the dataContext item object
        if (this.validate().valid) {
            this.applyValue(this.dataContext, newValues);
        }
        this.applyValue(compositeEditorOptions.formValues, newValues);
        const isExcludeDisabledFieldFormValues = (_e = (_d = (_c = this.gridOptions) === null || _c === void 0 ? void 0 : _c.compositeEditorOptions) === null || _d === void 0 ? void 0 : _d.excludeDisabledFieldFormValues) !== null && _e !== void 0 ? _e : false;
        if (isCalledByClearValue || (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {
            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object
        }
        grid.onCompositeEditorChange.notify({ ...activeCell, item, grid, column, formValues: compositeEditorOptions.formValues, editors: compositeEditorOptions.editors, triggeredBy }, new Slick.EventData());
    }
    // refresh the jquery object because the selected checkboxes were already set
    // prior to this method being called
    refresh() {
        if (typeof this.$editorElm.multipleSelect === 'function') {
            this.$editorElm.multipleSelect('refresh');
        }
    }
}
//# sourceMappingURL=selectEditor.js.map