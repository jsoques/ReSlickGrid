import 'slickgrid/plugins/slick.checkboxselectcolumn';
import 'slickgrid/plugins/slick.rowselectionmodel';
export class CheckboxSelectorExtension {
    constructor(sharedService) {
        this.sharedService = sharedService;
        this._addon = null;
    }
    dispose() {
        var _a;
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this._addon = null;
        if ((_a = this._rowSelectionPlugin) === null || _a === void 0 ? void 0 : _a.destroy) {
            this._rowSelectionPlugin.destroy();
        }
    }
    /**
     * Create the plugin before the Grid creation to avoid having odd behaviors.
     * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then
     */
    create(columnDefinitions, gridOptions) {
        var _a, _b;
        if (Array.isArray(columnDefinitions) && gridOptions) {
            if (!this._addon) {
                this._addon = new Slick.CheckboxSelectColumn(gridOptions.checkboxSelector);
            }
            const selectionColumn = this._addon.getColumnDefinition();
            if (typeof selectionColumn === 'object') {
                selectionColumn.excludeFromExport = true;
                selectionColumn.excludeFromColumnPicker = true;
                selectionColumn.excludeFromGridMenu = true;
                selectionColumn.excludeFromQuery = true;
                selectionColumn.excludeFromHeaderMenu = true;
                selectionColumn.maxWidth = selectionColumn.width || 30;
                // column index position in the grid
                const columnPosition = (_b = (_a = gridOptions === null || gridOptions === void 0 ? void 0 : gridOptions.checkboxSelector) === null || _a === void 0 ? void 0 : _a.columnIndexPosition) !== null && _b !== void 0 ? _b : 0;
                if (columnPosition > 0) {
                    columnDefinitions.splice(columnPosition, 0, selectionColumn);
                }
                else {
                    columnDefinitions.unshift(selectionColumn);
                }
            }
            return this._addon;
        }
        return null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /** Register the 3rd party addon (plugin) */
    register(rowSelectionPlugin) {
        if (this._addon && this.sharedService && this.sharedService.slickGrid && this.sharedService.gridOptions) {
            // the plugin has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created
            this.sharedService.slickGrid.registerPlugin(this._addon);
            // this also requires the Row Selection Model to be registered as well
            if (!rowSelectionPlugin || !this.sharedService.slickGrid.getSelectionModel()) {
                rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions);
                this.sharedService.slickGrid.setSelectionModel(rowSelectionPlugin);
            }
            // user might want to pre-select some rows
            // the setTimeout is because of timing issue with styling (row selection happen but rows aren't highlighted properly)
            if (this.sharedService.gridOptions.preselectedRows && rowSelectionPlugin && this.sharedService.slickGrid.getSelectionModel()) {
                setTimeout(() => { var _a; return (_a = this._addon) === null || _a === void 0 ? void 0 : _a.selectRows(this.sharedService.gridOptions.preselectedRows || []); });
            }
            this._rowSelectionPlugin = rowSelectionPlugin;
            return rowSelectionPlugin;
        }
        return null;
    }
}
//# sourceMappingURL=checkboxSelectorExtension.js.map