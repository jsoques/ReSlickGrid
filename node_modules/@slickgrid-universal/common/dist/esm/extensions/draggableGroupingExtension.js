import 'slickgrid/plugins/slick.draggablegrouping';
export class DraggableGroupingExtension {
    constructor(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._addon = null;
        this._draggableGroupingOptions = null;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        this.extensionUtility.nullifyFunctionNameStartingWithOn(this._draggableGroupingOptions);
        this._addon = null;
        this._draggableGroupingOptions = null;
    }
    /**
     * Bind/Create different plugins before the Grid creation.
     * For example the multi-select have to be added to the column definition before the grid is created to work properly
     */
    create(gridOptions) {
        if (gridOptions) {
            if (!this._addon) {
                this._addon = new Slick.DraggableGrouping(gridOptions.draggableGrouping);
            }
            return this._addon;
        }
        return null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /** Register the 3rd party addon (plugin) */
    register() {
        if (this._addon && this.sharedService && this.sharedService.slickGrid && this.sharedService.gridOptions) {
            this.sharedService.slickGrid.registerPlugin(this._addon);
            // Events
            if (this.sharedService.slickGrid && this.sharedService.gridOptions.draggableGrouping) {
                this._draggableGroupingOptions = this.sharedService.gridOptions.draggableGrouping;
                if (this._addon && this._draggableGroupingOptions.onExtensionRegistered) {
                    this._draggableGroupingOptions.onExtensionRegistered(this._addon);
                }
                if (this._addon && this._addon.onGroupChanged) {
                    const onGroupChangedHandler = this._addon.onGroupChanged;
                    this._eventHandler.subscribe(onGroupChangedHandler, (e, args) => {
                        if (this._draggableGroupingOptions && typeof this._draggableGroupingOptions.onGroupChanged === 'function') {
                            this._draggableGroupingOptions.onGroupChanged(e, args);
                        }
                    });
                }
            }
            return this._addon;
        }
        return null;
    }
}
//# sourceMappingURL=draggableGroupingExtension.js.map