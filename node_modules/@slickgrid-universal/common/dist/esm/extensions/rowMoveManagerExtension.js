import 'slickgrid/plugins/slick.rowmovemanager';
export class RowMoveManagerExtension {
    constructor(sharedService) {
        this.sharedService = sharedService;
        this._addon = null;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        var _a;
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
            this._addon = null;
        }
        if ((_a = this._rowSelectionPlugin) === null || _a === void 0 ? void 0 : _a.destroy) {
            this._rowSelectionPlugin.destroy();
        }
    }
    /**
     * Create the plugin before the Grid creation to avoid having odd behaviors.
     * Mostly because the column definitions might change after the grid creation, so we want to make sure to add it before then
     */
    create(columnDefinitions, gridOptions) {
        var _a, _b, _c;
        if (Array.isArray(columnDefinitions) && gridOptions) {
            this._addon = this.loadAddonWhenNotExists(columnDefinitions, gridOptions);
            const newRowMoveColumn = (_a = this._addon) === null || _a === void 0 ? void 0 : _a.getColumnDefinition();
            const rowMoveColDef = Array.isArray(columnDefinitions) && columnDefinitions.find((col) => col && col.behavior === 'selectAndMove');
            const finalRowMoveColumn = rowMoveColDef ? rowMoveColDef : newRowMoveColumn;
            // set some exclusion properties since we don't want this column to be part of the export neither the list of column in the pickers
            if (typeof finalRowMoveColumn === 'object') {
                finalRowMoveColumn.excludeFromExport = true;
                finalRowMoveColumn.excludeFromColumnPicker = true;
                finalRowMoveColumn.excludeFromGridMenu = true;
                finalRowMoveColumn.excludeFromQuery = true;
                finalRowMoveColumn.excludeFromHeaderMenu = true;
            }
            // only add the new column if it doesn't already exist
            if (!rowMoveColDef && finalRowMoveColumn) {
                // column index position in the grid
                const columnPosition = (_c = (_b = gridOptions === null || gridOptions === void 0 ? void 0 : gridOptions.rowMoveManager) === null || _b === void 0 ? void 0 : _b.columnIndexPosition) !== null && _c !== void 0 ? _c : 0;
                if (columnPosition > 0) {
                    columnDefinitions.splice(columnPosition, 0, finalRowMoveColumn);
                }
                else {
                    columnDefinitions.unshift(finalRowMoveColumn);
                }
            }
            return this._addon;
        }
        return null;
    }
    loadAddonWhenNotExists(columnDefinitions, gridOptions) {
        if (Array.isArray(columnDefinitions) && gridOptions) {
            if (!this._addon) {
                this._addon = new Slick.RowMoveManager((gridOptions === null || gridOptions === void 0 ? void 0 : gridOptions.rowMoveManager) || { cancelEditOnDrag: true });
            }
            return this._addon;
        }
        return null;
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /** Register the 3rd party addon (plugin) */
    register(rowSelectionPlugin) {
        if (this._addon && this.sharedService && this.sharedService.slickGrid && this.sharedService.gridOptions) {
            // this also requires the Row Selection Model to be registered as well
            if (!rowSelectionPlugin || !this.sharedService.slickGrid.getSelectionModel()) {
                rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions);
                this.sharedService.slickGrid.setSelectionModel(rowSelectionPlugin);
            }
            this._rowSelectionPlugin = rowSelectionPlugin;
            this.sharedService.slickGrid.registerPlugin(this._addon);
            // hook all events
            if (this._addon && this.sharedService.slickGrid && this.sharedService.gridOptions.rowMoveManager) {
                if (this.sharedService.gridOptions.rowMoveManager.onExtensionRegistered) {
                    this.sharedService.gridOptions.rowMoveManager.onExtensionRegistered(this._addon);
                }
                const onBeforeMoveRowsHandler = this._addon.onBeforeMoveRows;
                if (onBeforeMoveRowsHandler) {
                    this._eventHandler.subscribe(onBeforeMoveRowsHandler, (e, args) => {
                        if (this.sharedService.gridOptions.rowMoveManager && typeof this.sharedService.gridOptions.rowMoveManager.onBeforeMoveRows === 'function') {
                            return this.sharedService.gridOptions.rowMoveManager.onBeforeMoveRows(e, args);
                        }
                    });
                }
                const onMoveRowsHandler = this._addon.onMoveRows;
                if (onMoveRowsHandler) {
                    this._eventHandler.subscribe(onMoveRowsHandler, (e, args) => {
                        if (this.sharedService.gridOptions.rowMoveManager && typeof this.sharedService.gridOptions.rowMoveManager.onMoveRows === 'function') {
                            this.sharedService.gridOptions.rowMoveManager.onMoveRows(e, args);
                        }
                    });
                }
            }
            return this._addon;
        }
        return null;
    }
}
//# sourceMappingURL=rowMoveManagerExtension.js.map