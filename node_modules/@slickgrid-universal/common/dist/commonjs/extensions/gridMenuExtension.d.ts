import 'slickgrid/controls/slick.gridmenu';
import { Extension, GridOption, SlickEventData, SlickEventHandler, SlickGridMenu } from '../interfaces/index';
import { ExtensionUtility } from './extensionUtility';
import { FilterService } from '../services/filter.service';
import { SortService } from '../services/sort.service';
import { SharedService } from '../services/shared.service';
import { TranslaterService } from '../services/translater.service';
import { BackendUtilityService } from '../services/backendUtility.service';
export declare class GridMenuExtension implements Extension {
    private readonly extensionUtility;
    private readonly filterService;
    private readonly sharedService;
    private readonly sortService;
    private readonly backendUtilities?;
    private readonly translaterService?;
    private _addon;
    private _areVisibleColumnDifferent;
    private _eventHandler;
    private _gridMenuOptions;
    private _userOriginalGridMenu;
    constructor(extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService, sortService: SortService, backendUtilities?: BackendUtilityService | undefined, translaterService?: TranslaterService | undefined);
    get eventHandler(): SlickEventHandler;
    dispose(): void;
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance(): SlickGridMenu | null;
    /** Register the 3rd party addon (plugin) */
    register(): SlickGridMenu | null;
    /** Refresh the dataset through the Backend Service */
    refreshBackendDataset(gridOptions?: GridOption): void;
    showGridMenu(e: SlickEventData): void;
    /** Translate the Grid Menu titles and column picker */
    translateGridMenu(): void;
    /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */
    private addGridMenuCustomCommands;
    /**
     * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe
     * These are the default internal custom commands
     * @param event
     * @param GridMenuItem args
     */
    private executeGridMenuInternalCustomCommands;
    private emptyGridMenuTitles;
    /** @return default Grid Menu options */
    private getDefaultGridMenuOptions;
}
