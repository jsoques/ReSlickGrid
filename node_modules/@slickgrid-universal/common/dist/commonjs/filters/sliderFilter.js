"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderFilter = void 0;
const index_1 = require("../enums/index");
const utilities_1 = require("../services/utilities");
const bindingEvent_service_1 = require("../services/bindingEvent.service");
const DEFAULT_MIN_VALUE = 0;
const DEFAULT_MAX_VALUE = 100;
const DEFAULT_STEP = 1;
class SliderFilter {
    constructor() {
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
        this._elementRangeInputId = '';
        this._elementRangeOutputId = '';
        this.searchTerms = [];
        this._bindEventService = new bindingEvent_service_1.BindingEventService();
    }
    /** Getter for the Column Filter */
    get columnFilter() {
        var _a, _b;
        return (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.filter) !== null && _b !== void 0 ? _b : {};
    }
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator() {
        return index_1.OperatorType.equal;
    }
    /** Getter for the Filter Generic Params */
    get filterParams() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.filter) === null || _b === void 0 ? void 0 : _b.params) !== null && _c !== void 0 ? _c : {};
    }
    /** Getter for the `filter` properties */
    get filterProperties() {
        var _a, _b;
        return (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.filter) !== null && _b !== void 0 ? _b : {};
    }
    /** Getter for the current Operator */
    get operator() {
        var _a, _b;
        return (_b = (_a = this.columnFilter) === null || _a === void 0 ? void 0 : _a.operator) !== null && _b !== void 0 ? _b : this.defaultOperator;
    }
    /** Setter for the filter operator */
    set operator(operator) {
        if (this.columnFilter) {
            this.columnFilter.operator = operator;
        }
    }
    /**
     * Initialize the Filter
     */
    init(args) {
        if (!args) {
            throw new Error('[Slickgrid-Universal] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // define the input & slider number IDs
        this._elementRangeInputId = `rangeInput_${this.columnDef.field}`;
        this._elementRangeOutputId = `rangeOutput_${this.columnDef.field}`;
        // filter input can only have 1 search term, so we will use the 1st array index if it exist
        const searchTerm = (Array.isArray(this.searchTerms) && this.searchTerms.length >= 0) ? this.searchTerms[0] : '';
        // step 1, create the DOM Element of the filter & initialize it if searchTerm is filled
        this.filterElm = this.createDomElement(searchTerm);
        // step 2, subscribe to the change event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this._bindEventService.bind(this.filterInputElm, 'change', this.handleOnChange.bind(this));
        // if user chose to display the slider number on the right side, then update it every time it changes
        // we need to use both "input" and "change" event to be all cross-browser
        if (!this.filterParams.hideSliderNumber) {
            this._bindEventService.bind(this.filterInputElm, ['input', 'change'], this.handleInputChange.bind(this));
        }
    }
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery = true) {
        var _a, _b;
        if (this.filterElm) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            const clearedValue = (_b = (_a = this.filterParams) === null || _a === void 0 ? void 0 : _a.sliderStartValue) !== null && _b !== void 0 ? _b : DEFAULT_MIN_VALUE;
            this._currentValue = +clearedValue;
            this.filterInputElm.value = clearedValue;
            if (this.filterNumberElm) {
                this.filterNumberElm.textContent = clearedValue;
            }
            this.filterInputElm.dispatchEvent(new Event('change'));
        }
    }
    /**
     * destroy the filter
     */
    destroy() {
        var _a, _b;
        this._bindEventService.unbindAll();
        utilities_1.emptyElement(this.filterElm);
        (_b = (_a = this.filterElm) === null || _a === void 0 ? void 0 : _a.remove) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    /**
     * Get selected value retrieved from the slider element
     * @params selected items
     */
    getValues() {
        return this._currentValue;
    }
    /** Set value(s) on the DOM element */
    setValues(values, operator) {
        if (Array.isArray(values)) {
            this.filterInputElm.value = `${values[0]}`;
            if (this.filterNumberElm) {
                this.filterNumberElm.textContent = `${values[0]}`;
            }
            this._currentValue = +values[0];
        }
        else if (values) {
            this.filterInputElm.value = `${values !== null && values !== void 0 ? values : ''}`;
            this._currentValue = +values;
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    }
    //
    // protected functions
    // ------------------
    /**
     * Create the Filter DOM element
     * @param searchTerm optional preset search terms
     */
    createDomElement(searchTerm) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const minValue = (_d = (_c = this.filterProperties) === null || _c === void 0 ? void 0 : _c.minValue) !== null && _d !== void 0 ? _d : DEFAULT_MIN_VALUE;
        const maxValue = (_f = (_e = this.filterProperties) === null || _e === void 0 ? void 0 : _e.maxValue) !== null && _f !== void 0 ? _f : DEFAULT_MAX_VALUE;
        const defaultValue = (_h = (_g = this.filterParams) === null || _g === void 0 ? void 0 : _g.sliderStartValue) !== null && _h !== void 0 ? _h : minValue;
        const step = (_k = (_j = this.filterProperties) === null || _j === void 0 ? void 0 : _j.valueStep) !== null && _k !== void 0 ? _k : DEFAULT_STEP;
        const startValue = +((_m = (_l = this.filterParams) === null || _l === void 0 ? void 0 : _l.sliderStartValue) !== null && _m !== void 0 ? _m : minValue);
        const headerElm = this.grid.getHeaderRowColumn(columnId);
        utilities_1.emptyElement(headerElm);
        // create the DOM element & add an ID and filter class
        let searchTermInput = (searchTerm || '0');
        if (+searchTermInput < minValue) {
            searchTermInput = `${minValue}`;
        }
        if (+searchTermInput < startValue) {
            searchTermInput = `${startValue}`;
        }
        this._currentValue = +searchTermInput;
        // create the DOM element
        this.filterInputElm = document.createElement('input');
        this.filterInputElm.type = 'range';
        this.filterInputElm.className = `form-control slider-filter-input range ${this._elementRangeInputId}`;
        this.filterInputElm.defaultValue = defaultValue;
        this.filterInputElm.value = searchTermInput;
        this.filterInputElm.min = `${minValue}`;
        this.filterInputElm.max = `${maxValue}`;
        this.filterInputElm.step = `${step}`;
        this.filterInputElm.name = this._elementRangeInputId;
        this.filterInputElm.setAttribute('aria-label', (_p = (_o = this.columnFilter) === null || _o === void 0 ? void 0 : _o.ariaLabel) !== null && _p !== void 0 ? _p : `${utilities_1.toSentenceCase(columnId + '')} Search Filter`);
        const divContainerFilterElm = document.createElement('div');
        divContainerFilterElm.className = `search-filter slider-container filter-${columnId}`;
        divContainerFilterElm.appendChild(this.filterInputElm);
        if (!this.filterParams.hideSliderNumber) {
            divContainerFilterElm.classList.add('input-group');
            this.filterInputElm.value = searchTermInput;
            const divGroupAppendElm = document.createElement('div');
            divGroupAppendElm.className = 'input-group-addon input-group-append slider-value';
            this.filterNumberElm = document.createElement('span');
            this.filterNumberElm.className = `input-group-text ${this._elementRangeOutputId}`;
            this.filterNumberElm.textContent = searchTermInput;
            divGroupAppendElm.appendChild(this.filterNumberElm);
            divContainerFilterElm.appendChild(divGroupAppendElm);
        }
        // this.filterNumberElm.html(searchTermInput);
        divContainerFilterElm.dataset.columnid = `${columnId}`;
        // if there's a search term, we will add the "filled" class for styling purposes
        if (searchTerm) {
            divContainerFilterElm.classList.add('filled');
        }
        // append the new DOM element to the header row
        headerElm.appendChild(divContainerFilterElm);
        return divContainerFilterElm;
    }
    handleInputChange(event) {
        const value = (event === null || event === void 0 ? void 0 : event.target).value;
        if (value !== undefined && value !== null) {
            const element = document.querySelector(`.${this._elementRangeOutputId || ''}`);
            if (element === null || element === void 0 ? void 0 : element.textContent) {
                element.textContent = value;
            }
        }
    }
    handleOnChange(e) {
        const value = e && e.target && e.target.value;
        this._currentValue = +value;
        if (this._clearFilterTriggered) {
            this.filterElm.classList.remove('filled');
            this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, searchTerms: [], shouldTriggerQuery: this._shouldTriggerQuery });
        }
        else {
            this.filterElm.classList.add('filled');
            this.callback(e, { columnDef: this.columnDef, operator: this.operator, searchTerms: [value || '0'], shouldTriggerQuery: this._shouldTriggerQuery });
        }
        // reset both flags for next use
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
}
exports.SliderFilter = SliderFilter;
//# sourceMappingURL=sliderFilter.js.map