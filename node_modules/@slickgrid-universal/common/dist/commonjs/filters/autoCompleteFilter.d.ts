/// <reference types="jquery" />
import 'jquery-ui/ui/widgets/autocomplete';
import { OperatorType, OperatorString, SearchTerm } from '../enums/index';
import { AutocompleteOption, CollectionCustomStructure, CollectionOption, Column, ColumnFilter, Filter, FilterArguments, FilterCallback, GridOption, SlickGrid } from './../interfaces/index';
import { CollectionService } from '../services/collection.service';
import { TranslaterService } from '../services/translater.service';
import { RxJsFacade, Subscription } from '../services/rxjsFacade';
export declare class AutoCompleteFilter implements Filter {
    protected readonly translaterService: TranslaterService;
    protected readonly collectionService: CollectionService;
    protected readonly rxjs?: RxJsFacade | undefined;
    protected _autoCompleteOptions: AutocompleteOption;
    protected _clearFilterTriggered: boolean;
    protected _collection?: any[];
    protected _shouldTriggerQuery: boolean;
    /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */
    elementName: string;
    /** The JQuery DOM element */
    $filterElm: any;
    grid: SlickGrid;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    isFilled: boolean;
    /** The property name for labels in the collection */
    labelName: string;
    /** The property name for a prefix that can be added to the labels in the collection */
    labelPrefixName: string;
    /** The property name for a suffix that can be added to the labels in the collection */
    labelSuffixName: string;
    /** The property name for values in the collection */
    optionLabel: string;
    /** The property name for values in the collection */
    valueName: string;
    enableTranslateLabel: boolean;
    subscriptions: Subscription[];
    /**
     * Initialize the Filter
     */
    constructor(translaterService: TranslaterService, collectionService: CollectionService, rxjs?: RxJsFacade | undefined);
    /** Getter for the Autocomplete Option */
    get autoCompleteOptions(): Partial<AutocompleteOption>;
    /** Getter for the Collection Options */
    protected get collectionOptions(): CollectionOption;
    /** Getter for the Collection Used by the Filter */
    get collection(): any[] | undefined;
    /** Getter for the Filter Operator */
    get columnFilter(): ColumnFilter;
    /** Getter for the Editor DOM Element */
    get filterDomElement(): any;
    get filterOptions(): AutocompleteOption;
    /** Getter for the Custom Structure if exist */
    get customStructure(): CollectionCustomStructure | undefined;
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator(): OperatorType | OperatorString;
    /** Getter for the Grid Options pulled through the Grid Object */
    get gridOptions(): GridOption;
    /** jQuery UI AutoComplete instance */
    get instance(): any;
    /** Getter of the Operator to use when doing the filter comparing */
    get operator(): OperatorType | OperatorString;
    /** Setter for the filter operator */
    set operator(operator: OperatorType | OperatorString);
    /**
     * Initialize the filter template
     */
    init(args: FilterArguments): Promise<unknown>;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /** Set value(s) on the DOM element  */
    setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    protected filterCollection(inputCollection: any[]): any[];
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    protected sortCollection(inputCollection: any[]): any[];
    /**
     * Subscribe to both CollectionObserver & PropertyObserver with BindingEngine.
     * They each have their own purpose, the "propertyObserver" will trigger once the collection is replaced entirely
     * while the "collectionObverser" will trigger on collection changes (`push`, `unshift`, `splice`, ...)
     */
    protected watchCollectionChanges(): void;
    renderDomElement(collection: any[]): void;
    /**
     * Create the HTML template as a string
     */
    protected buildTemplateHtmlString(): string;
    /**
     * From the html template string, create a DOM element
     * @param filterTemplate
     */
    protected createDomElement(filterTemplate: string, collection: any[], searchTerm?: SearchTerm): any;
    onSelect(event: Event, ui: {
        item: any;
    }): boolean;
    protected handleOnInputChange(e: any): void;
    protected renderCustomItem(ul: HTMLElement, item: any): JQuery<HTMLElement>;
    protected renderCollectionItem(ul: any, item: any): JQuery<HTMLElement>;
}
