import { OperatorType, OperatorString, SearchTerm } from '../enums/index';
import { Column, ColumnFilter, Filter, FilterArguments, FilterCallback, SlickGrid } from './../interfaces/index';
import { BindingEventService } from '../services/bindingEvent.service';
export declare class SliderFilter implements Filter {
    protected _bindEventService: BindingEventService;
    protected _clearFilterTriggered: boolean;
    protected _currentValue?: number;
    protected _shouldTriggerQuery: boolean;
    protected _elementRangeInputId: string;
    protected _elementRangeOutputId: string;
    protected filterElm: HTMLDivElement;
    protected filterInputElm: HTMLInputElement;
    protected filterNumberElm?: HTMLSpanElement;
    grid: SlickGrid;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    constructor();
    /** Getter for the Column Filter */
    get columnFilter(): ColumnFilter;
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator(): OperatorType | OperatorString;
    /** Getter for the Filter Generic Params */
    protected get filterParams(): any;
    /** Getter for the `filter` properties */
    protected get filterProperties(): ColumnFilter;
    /** Getter for the current Operator */
    get operator(): OperatorType | OperatorString;
    /** Setter for the filter operator */
    set operator(operator: OperatorType | OperatorString);
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /**
     * Get selected value retrieved from the slider element
     * @params selected items
     */
    getValues(): number | undefined;
    /** Set value(s) on the DOM element */
    setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;
    /**
     * Create the Filter DOM element
     * @param searchTerm optional preset search terms
     */
    protected createDomElement(searchTerm?: SearchTerm): HTMLDivElement;
    protected handleInputChange(event: Event): void;
    protected handleOnChange(e: any): void;
}
