/// <reference types="jquery" />
import 'jquery-ui/ui/widgets/autocomplete';
import { AutocompleteOption, CollectionCustomStructure, Column, ColumnEditor, CompositeEditorOption, Editor, EditorArguments, EditorValidator, EditorValidationResult, GridOption, SlickGrid } from './../interfaces/index';
export declare class AutoCompleteEditor implements Editor {
    protected readonly args: EditorArguments;
    protected _autoCompleteOptions: AutocompleteOption;
    protected _currentValue: any;
    protected _defaultTextValue: string;
    protected _originalValue: any;
    protected _elementCollection: any[] | null;
    protected _isValueTouched: boolean;
    protected _lastInputKeyEvent?: JQuery.Event;
    protected _lastTriggeredByClearInput: boolean;
    /** The JQuery DOM element */
    protected _$editorInputGroupElm: any;
    protected _$input: any;
    protected _$closeButtonGroupElm: any;
    /** is the Editor disabled? */
    disabled: boolean;
    /** SlickGrid Grid object */
    grid: SlickGrid;
    /** The property name for labels in the collection */
    labelName: string;
    /** The property name for a prefix that can be added to the labels in the collection */
    labelPrefixName: string;
    /** The property name for a suffix that can be added to the labels in the collection */
    labelSuffixName: string;
    /** The property name for values in the collection */
    valueName: string;
    forceUserInput: boolean;
    /** Final collection displayed in the UI, that is after processing filter/sort/override */
    finalCollection: any[];
    constructor(args: EditorArguments);
    /** Getter for the Autocomplete Option */
    get autoCompleteOptions(): Partial<AutocompleteOption>;
    /** Getter of the Collection */
    get collection(): any[];
    /** Getter for the Editor DOM Element */
    get editorDomElement(): any;
    /** Getter for the Final Collection used in the AutoCompleted Source (this may vary from the "collection" especially when providing a customStructure) */
    get elementCollection(): any[] | null;
    /** Get Column Definition object */
    get columnDef(): Column;
    /** Get Column Editor object */
    get columnEditor(): ColumnEditor;
    /** Getter for the Custom Structure if exist */
    get customStructure(): CollectionCustomStructure | undefined;
    /** Getter for the item data context object */
    get dataContext(): any;
    get editorOptions(): AutocompleteOption;
    /** Getter for the Grid Options pulled through the Grid Object */
    get gridOptions(): GridOption;
    /** jQuery UI AutoComplete instance */
    get instance(): any;
    get hasAutoCommitEdit(): boolean;
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    get validator(): EditorValidator | undefined;
    init(): void;
    destroy(): void;
    /**
     * Dynamically change an Editor option, this is especially useful with Composite Editor
     * since this is the only way to change option after the Editor is created (for example dynamically change "minDate" or another Editor)
     * @param {string} optionName - MultipleSelect option name
     * @param {newValue} newValue - MultipleSelect new option value
     */
    changeEditorOption(optionName: keyof AutocompleteOption, newValue: any): void;
    disable(isDisabled?: boolean): void;
    focus(): void;
    show(): void;
    getValue(): any;
    setValue(inputValue: any, isApplyingValue?: boolean, triggerOnCompositeEditorChange?: boolean): void;
    applyValue(item: any, state: any): void;
    isValueChanged(): boolean;
    isValueTouched(): boolean;
    loadValue(item: any): void;
    clear(clearByDisableCommand?: boolean): void;
    /**
     * You can reset the input value,
     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)
     */
    reset(value?: any, triggerCompositeEventWhenExist?: boolean, clearByDisableCommand?: boolean): void;
    save(): void;
    serializeValue(): any;
    validate(_targetElm?: any, inputValue?: any): EditorValidationResult;
    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */
    protected applyInputUsabilityState(): void;
    protected handleChangeOnCompositeEditor(event: Event | null, compositeEditorOptions: CompositeEditorOption, triggeredBy?: 'user' | 'system', isCalledByClearValue?: boolean): void;
    handleSelect(event: Event, ui: {
        item: any;
    }): boolean;
    protected renderCustomItem(ul: HTMLElement, item: any): JQuery<HTMLElement>;
    protected renderCollectionItem(ul: HTMLElement, item: any): JQuery<HTMLElement>;
    renderDomElement(collection?: any[]): void;
}
