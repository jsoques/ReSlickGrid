"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SliderEditor = void 0;
const utilities_1 = require("../services/utilities");
const sliderValidator_1 = require("../editorValidators/sliderValidator");
const bindingEvent_service_1 = require("../services/bindingEvent.service");
const DEFAULT_MIN_VALUE = 0;
const DEFAULT_MAX_VALUE = 100;
const DEFAULT_STEP = 1;
/*
 * An example of a 'detached' editor.
 * KeyDown events are also handled to provide handling for Tab, Shift-Tab, Esc and Ctrl-Enter.
 */
class SliderEditor {
    constructor(args) {
        this.args = args;
        this._defaultValue = 0;
        this._elementRangeInputId = '';
        this._elementRangeOutputId = '';
        this._isValueTouched = false;
        this.sliderNumberElm = null;
        /** is the Editor disabled? */
        this.disabled = false;
        if (!args) {
            throw new Error('[Slickgrid-Universal] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (this.grid.getOptions() || {});
        this._bindEventService = new bindingEvent_service_1.BindingEventService();
        this.init();
    }
    /** Get Column Definition object */
    get columnDef() {
        return this.args.column;
    }
    /** Get Column Editor object */
    get columnEditor() {
        return this.columnDef && this.columnDef.internalColumnEditor || {};
    }
    /** Getter for the item data context object */
    get dataContext() {
        return this.args.item;
    }
    /** Getter for the Editor DOM Element */
    get editorDomElement() {
        return this._editorElm;
    }
    /** Getter for the Editor Input DOM Element */
    get editorInputDomElement() {
        return this._inputElm;
    }
    get hasAutoCommitEdit() {
        var _a;
        return (_a = this.gridOptions.autoCommitEdit) !== null && _a !== void 0 ? _a : false;
    }
    /** Getter for the Editor Generic Params */
    get editorParams() {
        return this.columnEditor.params || {};
    }
    /** Get the Validator function, can be passed in Editor property or Column Definition */
    get validator() {
        var _a, _b, _c;
        return (_b = (_a = this.columnEditor) === null || _a === void 0 ? void 0 : _a.validator) !== null && _b !== void 0 ? _b : (_c = this.columnDef) === null || _c === void 0 ? void 0 : _c.validator;
    }
    init() {
        var _a, _b, _c;
        const container = this.args && this.args.container;
        if (container && this.columnDef) {
            // define the input & slider number IDs
            const itemId = (_c = (_b = (_a = this.args) === null || _a === void 0 ? void 0 : _a.item) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : '';
            this._elementRangeInputId = `rangeInput_${this.columnDef.id}_${itemId}`;
            this._elementRangeOutputId = `rangeOutput_${this.columnDef.id}_${itemId}`;
            const compositeEditorOptions = this.args.compositeEditorOptions;
            // create HTML string template
            this._editorElm = this.buildDomElement();
            this._inputElm = this._editorElm.querySelector('input');
            this.sliderNumberElm = this._editorElm.querySelector(`span.input-group-text.${this._elementRangeOutputId}`);
            if (!compositeEditorOptions) {
                this.focus();
            }
            // watch on change event
            container.appendChild(this._editorElm);
            this._bindEventService.bind(this._editorElm, ['change', 'mouseup', 'touchend'], this.handleChangeEvent.bind(this));
            // if user chose to display the slider number on the right side, then update it every time it changes
            // we need to use both "input" and "change" event to be all cross-browser
            if (!this.editorParams.hideSliderNumber) {
                this._bindEventService.bind(this._editorElm, ['input', 'change'], this.handleChangeSliderNumber.bind(this));
            }
        }
    }
    cancel() {
        if (this._inputElm) {
            this._inputElm.value = `${this.originalValue}`;
        }
        this.args.cancelChanges();
    }
    destroy() {
        var _a, _b;
        this._bindEventService.unbindAll();
        (_b = (_a = this._inputElm) === null || _a === void 0 ? void 0 : _a.remove) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    disable(isDisabled = true) {
        var _a;
        const prevIsDisabled = this.disabled;
        this.disabled = isDisabled;
        if (this._inputElm) {
            if (isDisabled) {
                this._inputElm.disabled = true;
                // clear value when it's newly disabled and not empty
                const currentValue = this.getValue();
                if (prevIsDisabled !== isDisabled && ((_a = this.args) === null || _a === void 0 ? void 0 : _a.compositeEditorOptions) && currentValue !== '') {
                    this.reset(0, true, true);
                }
            }
            else {
                this._inputElm.disabled = false;
            }
        }
    }
    focus() {
        if (this._inputElm) {
            this._inputElm.focus();
        }
    }
    show() {
        var _a;
        const isCompositeEditor = !!((_a = this.args) === null || _a === void 0 ? void 0 : _a.compositeEditorOptions);
        if (isCompositeEditor) {
            // when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor
            this.applyInputUsabilityState();
        }
    }
    getValue() {
        var _a, _b;
        return (_b = (_a = this._inputElm) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';
    }
    setValue(value, isApplyingValue = false, triggerOnCompositeEditorChange = true) {
        if (this._inputElm) {
            this._inputElm.value = `${value}`;
        }
        if (this.sliderNumberElm) {
            this.sliderNumberElm.textContent = `${value}`;
        }
        if (isApplyingValue) {
            this.applyValue(this.args.item, this.serializeValue());
            // if it's set by a Composite Editor, then also trigger a change for it
            const compositeEditorOptions = this.args.compositeEditorOptions;
            if (compositeEditorOptions && triggerOnCompositeEditorChange) {
                this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'system');
            }
        }
    }
    applyValue(item, state) {
        var _a, _b, _c, _d, _e;
        const fieldName = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.field) !== null && _b !== void 0 ? _b : '';
        if (fieldName !== undefined) {
            const isComplexObject = (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0; // is the field a complex object, "address.streetNumber"
            const validation = this.validate(undefined, state);
            const newValue = (validation && validation.valid) ? state : '';
            // set the new value to the item datacontext
            if (isComplexObject) {
                // when it's a complex object, user could override the object path (where the editable object is located)
                // else we use the path provided in the Field Column Definition
                const objectPath = (_e = (_d = (_c = this.columnEditor) === null || _c === void 0 ? void 0 : _c.complexObjectPath) !== null && _d !== void 0 ? _d : fieldName) !== null && _e !== void 0 ? _e : '';
                utilities_1.setDeepValue(item, objectPath, newValue);
            }
            else if (item) {
                item[fieldName] = newValue;
            }
        }
    }
    isValueChanged() {
        var _a, _b;
        const elmValue = (_b = (_a = this._inputElm) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';
        return (!(elmValue === '' && this.originalValue === undefined)) && (+elmValue !== this.originalValue);
    }
    isValueTouched() {
        return this._isValueTouched;
    }
    loadValue(item) {
        var _a, _b;
        const fieldName = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.field) !== null && _b !== void 0 ? _b : '';
        if (item && fieldName !== undefined) {
            // is the field a complex object, "address.streetNumber"
            const isComplexObject = (fieldName === null || fieldName === void 0 ? void 0 : fieldName.indexOf('.')) > 0;
            let value = (isComplexObject) ? utilities_1.getDescendantProperty(item, fieldName) : (item.hasOwnProperty(fieldName) ? item[fieldName] : this._defaultValue);
            if (value === '' || value === null || value === undefined) {
                value = this._defaultValue; // load default value when item doesn't have any value
            }
            this.originalValue = +value;
            if (this._inputElm) {
                this._inputElm.value = `${value}`;
            }
            if (this.sliderNumberElm) {
                this.sliderNumberElm.textContent = `${value}`;
            }
        }
    }
    /**
     * You can reset or clear the input value,
     * when no value is provided it will use the original value to reset (could be useful with Composite Editor Modal with edit/clone)
     */
    reset(value, triggerCompositeEventWhenExist = true, clearByDisableCommand = false) {
        var _a;
        const inputValue = (_a = value !== null && value !== void 0 ? value : this.originalValue) !== null && _a !== void 0 ? _a : 0;
        if (this._editorElm) {
            this._editorElm.querySelector('input').value = `${inputValue}`;
            this._editorElm.querySelector('div.input-group-addon.input-group-append').textContent = `${inputValue}`;
        }
        this._isValueTouched = false;
        const compositeEditorOptions = this.args.compositeEditorOptions;
        if (compositeEditorOptions && triggerCompositeEventWhenExist) {
            const shouldDeleteFormValue = !clearByDisableCommand;
            this.handleChangeOnCompositeEditor(null, compositeEditorOptions, 'user', shouldDeleteFormValue);
        }
    }
    save() {
        const validation = this.validate();
        const isValid = (validation && validation.valid) || false;
        if (this.hasAutoCommitEdit && isValid) {
            // do not use args.commitChanges() as this sets the focus to the next row.
            // also the select list will stay shown when clicking off the grid
            this.grid.getEditorLock().commitCurrentEdit();
        }
        else {
            this.args.commitChanges();
        }
    }
    serializeValue() {
        var _a, _b;
        const elmValue = (_b = (_a = this._inputElm) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';
        return elmValue !== '' ? parseInt(elmValue, 10) : this.originalValue;
    }
    validate(_targetElm, inputValue) {
        var _a, _b;
        // when using Composite Editor, we also want to recheck if the field if disabled/enabled since it might change depending on other inputs on the composite form
        if (this.args.compositeEditorOptions) {
            this.applyInputUsabilityState();
        }
        // when field is disabled, we can assume it's valid
        if (this.disabled) {
            return { valid: true, msg: '' };
        }
        const elmValue = (inputValue !== undefined) ? inputValue : (_a = this._inputElm) === null || _a === void 0 ? void 0 : _a.value;
        return sliderValidator_1.sliderValidator(elmValue, {
            editorArgs: this.args,
            errorMessage: this.columnEditor.errorMessage,
            minValue: this.columnEditor.minValue,
            maxValue: this.columnEditor.maxValue,
            required: ((_b = this.args) === null || _b === void 0 ? void 0 : _b.compositeEditorOptions) ? false : this.columnEditor.required,
            validator: this.validator,
        });
    }
    //
    // protected functions
    // ------------------
    /**
     * Create the HTML template as a string
     */
    buildDomElement() {
        var _a, _b, _c, _d;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const title = this.columnEditor && this.columnEditor.title || '';
        const minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;
        const maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;
        const defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;
        const step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;
        this._defaultValue = defaultValue;
        const inputElm = document.createElement('input');
        inputElm.name = this._elementRangeInputId;
        inputElm.title = title;
        inputElm.type = 'range';
        inputElm.defaultValue = defaultValue;
        inputElm.value = defaultValue;
        inputElm.min = `${minValue}`;
        inputElm.max = `${maxValue}`;
        inputElm.step = `${step}`;
        inputElm.className = `form-control slider-editor-input editor-${columnId} range ${this._elementRangeInputId}`;
        inputElm.setAttribute('aria-label', (_d = (_c = this.columnEditor) === null || _c === void 0 ? void 0 : _c.ariaLabel) !== null && _d !== void 0 ? _d : `${utilities_1.toSentenceCase(columnId + '')} Slider Editor`);
        const divContainerElm = document.createElement('div');
        divContainerElm.className = 'slider-container slider-editor';
        divContainerElm.appendChild(inputElm);
        if (!this.editorParams.hideSliderNumber) {
            divContainerElm.classList.add('input-group');
            // <div class="input-group-addon input-group-append slider-value"><span class="input-group-text ${this._elementRangeOutputId}">${defaultValue}</span></div>
            const spanGroupElm = document.createElement('span');
            spanGroupElm.className = `input-group-text ${this._elementRangeOutputId}`;
            spanGroupElm.textContent = `${defaultValue}`;
            const divGroupAddonElm = document.createElement('div');
            divGroupAddonElm.className = 'input-group-addon input-group-append slider-value';
            divGroupAddonElm.appendChild(spanGroupElm);
            divContainerElm.appendChild(divGroupAddonElm);
        }
        return divContainerElm;
    }
    /** when it's a Composite Editor, we'll check if the Editor is editable (by checking onBeforeEditCell) and if not Editable we'll disable the Editor */
    applyInputUsabilityState() {
        const activeCell = this.grid.getActiveCell();
        const isCellEditable = this.grid.onBeforeEditCell.notify({
            ...activeCell, item: this.dataContext, column: this.args.column, grid: this.grid, target: 'composite', compositeEditorOptions: this.args.compositeEditorOptions
        });
        this.disable(isCellEditable === false);
    }
    handleChangeEvent(event) {
        this._isValueTouched = true;
        const compositeEditorOptions = this.args.compositeEditorOptions;
        if (compositeEditorOptions) {
            this.handleChangeOnCompositeEditor(event, compositeEditorOptions);
        }
        else {
            this.save();
        }
    }
    handleChangeSliderNumber(event) {
        var _a, _b;
        const value = (_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : '';
        if (value !== '' && this.sliderNumberElm) {
            this.sliderNumberElm.textContent = value;
        }
    }
    handleChangeOnCompositeEditor(event, compositeEditorOptions, triggeredBy = 'user', isCalledByClearValue = false) {
        var _a, _b, _c, _d, _e;
        const activeCell = this.grid.getActiveCell();
        const column = this.args.column;
        const columnId = (_b = (_a = this.columnDef) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
        const item = this.dataContext;
        const grid = this.grid;
        const newValue = this.serializeValue();
        // when valid, we'll also apply the new value to the dataContext item object
        if (this.validate().valid) {
            this.applyValue(this.dataContext, newValue);
        }
        this.applyValue(compositeEditorOptions.formValues, newValue);
        const isExcludeDisabledFieldFormValues = (_e = (_d = (_c = this.gridOptions) === null || _c === void 0 ? void 0 : _c.compositeEditorOptions) === null || _d === void 0 ? void 0 : _d.excludeDisabledFieldFormValues) !== null && _e !== void 0 ? _e : false;
        if (isCalledByClearValue || (this.disabled && isExcludeDisabledFieldFormValues && compositeEditorOptions.formValues.hasOwnProperty(columnId))) {
            delete compositeEditorOptions.formValues[columnId]; // when the input is disabled we won't include it in the form result object
        }
        grid.onCompositeEditorChange.notify({ ...activeCell, item, grid, column, formValues: compositeEditorOptions.formValues, editors: compositeEditorOptions.editors, triggeredBy }, { ...new Slick.EventData(), ...event });
    }
}
exports.SliderEditor = SliderEditor;
//# sourceMappingURL=sliderEditor.js.map