"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumTotalsColoredFormatter = void 0;
const utilities_1 = require("../services/utilities");
const formatterUtilities_1 = require("../formatters/formatterUtilities");
const sumTotalsColoredFormatter = (totals, columnDef, grid) => {
    const field = columnDef.field || '';
    const val = totals.sum && totals.sum[field];
    const params = columnDef && columnDef.params;
    const prefix = params && params.groupFormatterPrefix || '';
    const suffix = params && params.groupFormatterSuffix || '';
    const minDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    const maxDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    const decimalSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = formatterUtilities_1.getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val !== null && !isNaN(+val)) {
        const colorStyle = (val >= 0) ? 'green' : 'red';
        const formattedNumber = utilities_1.formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);
        return `<span style="color:${colorStyle}">${prefix}${formattedNumber}${suffix}</span>`;
    }
    return '';
};
exports.sumTotalsColoredFormatter = sumTotalsColoredFormatter;
//# sourceMappingURL=sumTotalsColoredFormatter.js.map