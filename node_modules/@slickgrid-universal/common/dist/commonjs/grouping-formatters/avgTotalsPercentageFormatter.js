"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.avgTotalsPercentageFormatter = void 0;
const utilities_1 = require("../services/utilities");
const formatterUtilities_1 = require("../formatters/formatterUtilities");
const avgTotalsPercentageFormatter = (totals, columnDef, grid) => {
    const field = columnDef.field || '';
    let val = totals.avg && totals.avg[field];
    const params = columnDef && columnDef.params;
    let prefix = params && params.groupFormatterPrefix || '';
    const suffix = params && params.groupFormatterSuffix || '';
    const minDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    const maxDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    const decimalSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = formatterUtilities_1.getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val !== null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    const outputVal = utilities_1.thousandSeparatorFormatted(Math.round(val), thousandSeparator);
                    return `${prefix}(${outputVal}%)${suffix}`;
                }
                return `${prefix}(${utilities_1.decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%)${suffix}`;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            const outputVal = utilities_1.thousandSeparatorFormatted(Math.round(val), thousandSeparator);
            return `${prefix}${outputVal}%${suffix}`;
        }
        return `${prefix}${utilities_1.decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%${suffix}`;
    }
    return '';
};
exports.avgTotalsPercentageFormatter = avgTotalsPercentageFormatter;
//# sourceMappingURL=avgTotalsPercentageFormatter.js.map