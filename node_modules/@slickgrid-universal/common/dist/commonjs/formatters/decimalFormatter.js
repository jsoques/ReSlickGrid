"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decimalFormatter = void 0;
const utilities_1 = require("./../services/utilities");
const formatterUtilities_1 = require("./formatterUtilities");
/**
 * Display the value as x decimals formatted, defaults to 2 decimals.
 * You can pass "minDecimal" and/or "maxDecimal" to the "params" property.
 * For example:: `{ formatter: Formatters.decimal, params: { minDecimal: 2, maxDecimal: 4 }}`
 */
const decimalFormatter = (_row, _cell, value, columnDef, _dataContext, grid) => {
    const minDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);
    const maxDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 2);
    const decimalSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const numberPrefix = formatterUtilities_1.getValueFromParamsOrFormatterOptions('numberPrefix', columnDef, grid, '');
    const numberSuffix = formatterUtilities_1.getValueFromParamsOrFormatterOptions('numberSuffix', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = formatterUtilities_1.getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (utilities_1.isNumber(value)) {
        return utilities_1.formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, numberPrefix, numberSuffix, decimalSeparator, thousandSeparator);
    }
    return value;
};
exports.decimalFormatter = decimalFormatter;
//# sourceMappingURL=decimalFormatter.js.map