"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dollarColoredFormatter = void 0;
const utilities_1 = require("./../services/utilities");
const formatterUtilities_1 = require("./formatterUtilities");
/** Display the value as 2 decimals formatted with dollar sign '$' at the end of of the value, change color of text to red/green on negative/positive value */
const dollarColoredFormatter = (_row, _cell, value, columnDef, _dataContext, grid) => {
    const minDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);
    const maxDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);
    const decimalSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = formatterUtilities_1.getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (utilities_1.isNumber(value)) {
        const colorStyle = (value >= 0) ? 'green' : 'red';
        const formattedNumber = utilities_1.formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);
        return `<span style="color:${colorStyle}">${formattedNumber}</span>`;
    }
    return value;
};
exports.dollarColoredFormatter = dollarColoredFormatter;
//# sourceMappingURL=dollarColoredFormatter.js.map