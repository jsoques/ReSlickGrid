"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.percentSymbolFormatter = void 0;
const utilities_1 = require("./../services/utilities");
const formatterUtilities_1 = require("./formatterUtilities");
/** Takes a cell value number (between 0-100) and add the "%" after the number */
const percentSymbolFormatter = (_row, _cell, value, columnDef, _dataContext, grid) => {
    const minDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    const maxDecimal = formatterUtilities_1.getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    const decimalSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = formatterUtilities_1.getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = formatterUtilities_1.getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (utilities_1.isNumber(value)) {
        return utilities_1.formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '%', decimalSeparator, thousandSeparator);
    }
    return value;
};
exports.percentSymbolFormatter = percentSymbolFormatter;
//# sourceMappingURL=percentSymbolFormatter.js.map